<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ACWing826&amp;ACWing827</title>
      <link href="/posts/a7cb0fc9.html"/>
      <url>/posts/a7cb0fc9.html</url>
      
        <content type="html"><![CDATA[<h1 id="ACWing826-单链表"><a href="#ACWing826-单链表" class="headerlink" title="ACWing826.单链表"></a>ACWing826.单链表</h1><p>实现一个单链表，链表初始为空，支持三种操作：</p><ul><li>向链表头插入一个数； </li><li>删除第k个插入后的数后面的一个数；</li><li>在第k个插入的数后插入一个数。<br>现在要对该链表进行M次操作，进行完所有操作后，从头到尾输出整个链表。<br><strong>注意：</strong> 题目中的第k个插入的数并不是指当前链表的第k个数。例如操作过程中一共插入了n个数，则按照插入的时间顺序，这n个数依次为：第1个插入的数，第2个插入的数，…第n个插入的数。<br><strong>输入格式：</strong><br>第一行包含整数M，表示操作次数。<br>接下来M行，每行包含一个操作命令，操作命令可能为以下几种：</li><li><code>H x</code>，表示向链表头插入一个数x；</li><li><code>D k</code>，表示删除第k个插入的数后面的数(当k为0时，表示删除头结点)；</li><li><code>I k x</code>，表示在第k个插入的数后面插入一个数x(此操作中k均大于0)。<br><strong>输出格式：</strong><br>共一行，将整个链表从头到尾输出。</li></ul><hr><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240227135630.png" alt="image.png"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//ACWing826.单链表  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;  </span><br><span class="line"><span class="comment">//head表示头节点的下标  </span></span><br><span class="line"><span class="comment">//e[i]表示节点i的值  </span></span><br><span class="line"><span class="comment">//ne[i]表示节点i的next指针是多少  </span></span><br><span class="line"><span class="comment">//idx存储当前已经用到了哪个点  </span></span><br><span class="line"><span class="type">int</span> head,idx,e[N],ne[N];  </span><br><span class="line"><span class="comment">//初始化  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    head=<span class="number">-1</span>;  </span><br><span class="line">    idx=<span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//将x插到头节点  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;  </span><br><span class="line">    e[idx]=x;  </span><br><span class="line">    ne[idx]=head;  </span><br><span class="line">    head=idx;  </span><br><span class="line">    idx++;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//将x插入到下标为k的节点后面  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span>&#123;  </span><br><span class="line">    e[idx]=x;  </span><br><span class="line">    ne[idx]=ne[k];  </span><br><span class="line">    ne[k]=idx;  </span><br><span class="line">    idx++;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//将下标是k的节点后面的节点删除  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;  </span><br><span class="line">    ne[k]=ne[ne[k]];  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//输出链表  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="type">int</span> i=head;  </span><br><span class="line">    <span class="keyword">while</span> (i!=<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,e[i]);  </span><br><span class="line">        i=ne[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="type">int</span> m;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);  </span><br><span class="line">    <span class="built_in">init</span>();  </span><br><span class="line">    <span class="keyword">while</span> (m--)&#123;  </span><br><span class="line">        <span class="type">int</span> k,x;  </span><br><span class="line">        <span class="type">char</span> op;  </span><br><span class="line">        cin&gt;&gt;op;  </span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;H&#x27;</span>)&#123;  </span><br><span class="line">            cin&gt;&gt;x;  </span><br><span class="line">            <span class="built_in">add_to_head</span>(x);  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;D&#x27;</span>)&#123;  </span><br><span class="line">            cin&gt;&gt;k;  </span><br><span class="line">            <span class="keyword">if</span>(!k)head=ne[head];  </span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">remove</span>(k<span class="number">-1</span>);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            cin&gt;&gt;k&gt;&gt;x;  </span><br><span class="line">            <span class="built_in">add</span>(k<span class="number">-1</span>,x);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">print</span>();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ACWing827-双链表"><a href="#ACWing827-双链表" class="headerlink" title="ACWing827.双链表"></a>ACWing827.双链表</h1><p>实现一个双链表，双链表初始为空，支持5种操作： </p><ul><li>在最左侧插入一个数；</li><li>在最右侧插入一个数；</li><li>将第k个插入的数删除；</li><li>在第k个插入的数左侧插入一个数；</li><li>在第k个插入的数右侧插入一个数。<br>现在要对该链表进行M次操作，进行完所有操作后，从左到右输出整个链表。<br><strong>注意：</strong> 题目中第k个插入的数并不是指当前链表的第k个数。例如操作过程中一共插入了n个数，则按照插入的时间顺序，这n个数依次为：第1个插入的数，第2个插入的数，…第n个插入的数。<br><strong>输入格式：</strong><br>第一行包含整数M，表示操作次数。<br>接下来M行，每行包含一个操作命令，操作命令可能为以下几种：</li><li><code>L x</code>，表示在链表的最左端插入数x；</li><li><code>R x</code>，表示在链表的最右端插入数x；</li><li><code>D k</code>，表示将第k个插入的数删除；</li><li><code>IL k x</code>，表示在第k个插入的数左侧插入一个数；</li><li><code>IR k x</code>，表示在第k个插入的数右侧插入一个数。<br><strong>输出格式：</strong><br>共一行，将整个链表从左到右输出。</li></ul><hr><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240227152954.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240227154218.png" alt="image.png"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ACWing.827双链表  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;  </span><br><span class="line"><span class="type">int</span> m;  </span><br><span class="line"><span class="type">int</span> e[N],l[N],r[N],idx;  </span><br><span class="line"><span class="comment">//初始化  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="comment">//0表示左端点  </span></span><br><span class="line">    <span class="comment">//1表示右端点  </span></span><br><span class="line">    r[<span class="number">0</span>]=<span class="number">1</span>;  </span><br><span class="line">    l[<span class="number">1</span>]=<span class="number">0</span>;  </span><br><span class="line">    idx=<span class="number">2</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span>&#123;  </span><br><span class="line">    e[idx]=x;  </span><br><span class="line">    r[idx]=r[k];  </span><br><span class="line">    l[idx]=k;  </span><br><span class="line"><span class="comment">//    r[k]=idx;  </span></span><br><span class="line"><span class="comment">//    l[r[idx]]=idx;  </span></span><br><span class="line">    l[r[k]]=idx;  </span><br><span class="line">    r[k]=idx;  </span><br><span class="line">    idx++;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//删除第k个节点  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;  </span><br><span class="line">    r[l[k]]=r[k];  </span><br><span class="line">    l[r[k]]=l[k];  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印链表  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = r[<span class="number">0</span>]; i!=<span class="number">1</span> ; i=r[i]) &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,e[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="type">int</span> m;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);  </span><br><span class="line">    <span class="built_in">init</span>();  </span><br><span class="line">    <span class="keyword">while</span> (m--)&#123;  </span><br><span class="line">        string op;  </span><br><span class="line">        <span class="type">int</span> k,x;  </span><br><span class="line">        cin&gt;&gt;op;  </span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&quot;L&quot;</span>)&#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">            <span class="built_in">add</span>(<span class="number">0</span>,x);  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;R&quot;</span>)&#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">            <span class="built_in">add</span>(l[<span class="number">1</span>],x);  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;D&quot;</span>)&#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);  </span><br><span class="line">            <span class="built_in">remove</span>(k+<span class="number">1</span>);<span class="comment">//数组下标从2开始，第k个插入的元素对应下标为k+1  </span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;IL&quot;</span>)&#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;k,&amp;x);  </span><br><span class="line">            <span class="built_in">add</span>(l[k+<span class="number">1</span>],x);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="comment">//op==&quot;IR&quot;  </span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;k,&amp;x);  </span><br><span class="line">            <span class="built_in">add</span>(k+<span class="number">1</span>,x);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">print</span>();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ACWing802</title>
      <link href="/posts/fc619a82.html"/>
      <url>/posts/fc619a82.html</url>
      
        <content type="html"><![CDATA[<h1 id="ACWing802-区间和"><a href="#ACWing802-区间和" class="headerlink" title="ACWing802.区间和"></a>ACWing802.区间和</h1><p>假定有一个无限长的数轴，数轴上每个坐标上的数都是0。<br>现在，我们首先进行n次操作，每次操作将某一位置x上的数加c。<br>接下来，进行m次询问，每个询问包含两个整数l和r，你需要求出在区间<code>[l,r]</code>之间的所有数的和。<br><strong>输入格式：</strong><br>第一行包含两个整数n和m。<br>接下来n行，每行包含两个整数x和c。<br>再接下来m行，每行包含两个整数l和r。<br><strong>输出格式：</strong><br>共m行，每行输出一个询问中所求的区间内数字和。</p><hr><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240227133456.png" alt="image.png"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ACWing802.区间和  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">300010</span>;  </span><br><span class="line"><span class="type">int</span> n,m;  </span><br><span class="line"><span class="type">int</span> a[N],s[N];  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;<span class="comment">//用于存储离散化数组  </span></span><br><span class="line">vector&lt;PII&gt; add,query;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;  </span><br><span class="line"><span class="comment">//    int l=0,r=alls.size()-1;  </span></span><br><span class="line"><span class="comment">//    while (l&lt;r)&#123;  </span></span><br><span class="line"><span class="comment">//        int mid=l+r&gt;&gt;1;  </span></span><br><span class="line"><span class="comment">//        if(alls[mid]&gt;=x)r=mid;  </span></span><br><span class="line"><span class="comment">//        else l=mid+1;  </span></span><br><span class="line"><span class="comment">//    &#125;  </span></span><br><span class="line">    <span class="type">int</span> r= <span class="built_in">lower_bound</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>(),x)-alls.<span class="built_in">begin</span>();  </span><br><span class="line">    <span class="keyword">return</span> r+<span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;  </span><br><span class="line">    <span class="type">int</span> x,c;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;c);  </span><br><span class="line">    add.<span class="built_in">push_back</span>(&#123;x,c&#125;);  </span><br><span class="line">    alls.<span class="built_in">push_back</span>(x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;  </span><br><span class="line">    <span class="type">int</span> l,r;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);  </span><br><span class="line">    query.<span class="built_in">push_back</span>(&#123;l,r&#125;);  </span><br><span class="line">    alls.<span class="built_in">push_back</span>(l);<span class="comment">//区间两端也需要加入离散化数组  </span></span><br><span class="line">    alls.<span class="built_in">push_back</span>(r);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//去重  </span></span><br><span class="line">    <span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>());  </span><br><span class="line">    alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());  </span><br><span class="line">    <span class="comment">//处理插入  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> item:add)&#123;  </span><br><span class="line">    <span class="type">int</span> x=<span class="built_in">find</span>(item.first);  </span><br><span class="line">    a[x]+=item.second;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//预处理前缀和数组  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=alls.<span class="built_in">size</span>();i++)s[i]=s[i<span class="number">-1</span>]+a[i];  </span><br><span class="line">    <span class="comment">//处理查询  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> item:query)&#123;  </span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">find</span>(item.first),r=<span class="built_in">find</span>(item.second);  </span><br><span class="line">    cout&lt;&lt;s[r]-s[l<span class="number">-1</span>]&lt;&lt;endl;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACWing </tag>
            
            <tag> 算法 </tag>
            
            <tag> 区间和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACWing800</title>
      <link href="/posts/126ffbae.html"/>
      <url>/posts/126ffbae.html</url>
      
        <content type="html"><![CDATA[<h1 id="ACWing800-数组元素的目标和"><a href="#ACWing800-数组元素的目标和" class="headerlink" title="ACWing800.数组元素的目标和"></a>ACWing800.数组元素的目标和</h1><p>给定两个升序排序的有序数组A和B，以及一个目标值x。<br>数组下标从0开始。<br>请你求出满足<code>A[i]+B[j]=x</code>的数对(i,j)。<br><strong>输入格式：</strong><br>第一行包含三个整数n，m，x，分别表示A的长度，B的长度以及目标值x。<br>第二行包含n个整数，表示数组A。<br>第三行包含m个整数，表示数组B。<br><strong>输出格式：</strong><br>共一行，包含两个整数i和j。</p><hr><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240227125539.png" alt="image.png"></p><blockquote><p><em><strong>总结：</strong></em><br>双指针算法一般先是写出暴力过程<br>然后找单调性</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ACWing800.数组元素的目标和  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;  </span><br><span class="line"><span class="type">int</span> a[N],b[N];  </span><br><span class="line"><span class="type">int</span> n,m,x;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;x);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=m<span class="number">-1</span>;i&lt;n;i++)&#123;  </span><br><span class="line">    <span class="keyword">while</span>(j&amp;&amp;a[i]+b[j]&gt;x)j--;  </span><br><span class="line">    <span class="keyword">if</span>(a[i]+b[j]==x)&#123;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,i,j);  </span><br><span class="line">    <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACWing </tag>
            
            <tag> 算法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC技术</title>
      <link href="/posts/17d7368a.html"/>
      <url>/posts/17d7368a.html</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h1><h2 id="数据的持久化"><a href="#数据的持久化" class="headerlink" title="数据的持久化"></a>数据的持久化</h2><ul><li>持久化（persistence）：将内存中的数据保存到可永久保存的存储设备中（如磁盘）。</li><li>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。<br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240224145916.png" alt="image.png"></li></ul><h2 id="什么是JDBC？"><a href="#什么是JDBC？" class="headerlink" title="什么是JDBC？"></a>什么是JDBC？</h2><ul><li>JDBC（Java DataBase Connectivity）java数据库连接</li><li>是JavaEE平台下的技术规范</li><li>定义了在Java语言中连接数据，执行SQL语句的标准API</li><li>可以为多种关系数据库提供统一访问</li></ul><h2 id="什么是数据库驱动程序？"><a href="#什么是数据库驱动程序？" class="headerlink" title="什么是数据库驱动程序？"></a>什么是数据库驱动程序？</h2><ul><li>数据库驱动就是直接操作数据库的一个程序</li><li>不同数据产品的数据库驱动名字有差异</li><li>在程序中需要依赖数据库驱动来完成对数据库的操作</li></ul><h2 id="Java中访问数据库技术"><a href="#Java中访问数据库技术" class="headerlink" title="Java中访问数据库技术"></a>Java中访问数据库技术</h2><ul><li>基于JDBC标准访问数据库</li><li>使用第三方ORM框架，如Hibernate、Mybatis等访问数据库</li></ul><h2 id="程序操作数据库流程"><a href="#程序操作数据库流程" class="headerlink" title="程序操作数据库流程"></a>程序操作数据库流程</h2><p>如果没有JDBC，那么Java程序访问数据库时是这样的：<br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240224151339.png" alt="image.png"><br>有了JDBC，Java程序访问数据库时是这样的：<br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240224151612.png" alt="image.png"></p><h1 id="JDBC常用的类与接口"><a href="#JDBC常用的类与接口" class="headerlink" title="JDBC常用的类与接口"></a>JDBC常用的类与接口</h1><ol><li><strong>Driver接口</strong><br> Driver接口的作用是来定义数据库驱动对象应该具备的一些能力。比如与数据库建立连接的方法的定义，该接口是提供给数据库厂商使用的，所有支持Java语言连接的数据库都实现了该接口，实现该接口的类我们称之为数据库驱动类。</li><li><strong>DriverManager类</strong><br> DriverManager是驱动程序管理器，是负责管理数据库驱动程序的。驱动注册以后，会保存在DriverManager中的已注册列表中。DriverManager通过实例化的数据库驱动对象，能够使应用程序与数据库之间建立连接，并返回Connection接口类型的数据库连接对象。<ul><li><code>getConnection(String jdbcUrl,String user,String password)</code>：该方法通过访问数据库的url、用户以及密码，返回对应的数据库的Connection对象。</li><li><code>JDBC URL</code>：与数据库连接时，用来连接到指定数据库标识符。在URL中包括了该数据库的类型、地址、端口、库名称等信息。不同品牌数据库的连接URL也不同。<ul><li>连接MySQL数据库：<br>  <code>Connection  conn=DriverManager.getConnection(&quot;jdbc:mysql://host:port/database&quot;,&quot;user&quot;,&quot;password&quot;);</code></li><li>连接Oracle数据库：<br>  <code>Connection conn=DriverManager.getConnection(&quot;jdbc:oracle:thin:@host:port:database&quot;,&quot;user&quot;,&quot;password&quot;);</code></li></ul></li></ul></li><li><strong>Connection接口</strong><br> Connection是数据库的连接（会话）对象。对数据库的一切操作都是在这个连接基础之上进行的，我们可以通过该对象执行sql语句并返回结果。<br> <strong>常用方法</strong><ul><li>createStatement()：创建向数据库发送sql的Statement接口类型的对象。</li><li>preparedStatement(sql)：创建向数据库发送预编译sql的PrePareStatement接口类型的对象。</li><li>setAutoCommit(boolean autoCommit)：设置事务是否自动提交。</li><li>commit()：在链接上提交事务。</li><li>rollback()：在此链接上回滚事务。</li></ul></li><li><strong>Statement接口</strong><br> 用于执行静态SQL语句并返回它所生成结果的对象。由createStatement创建，用于发送简单的SQL语句(不支持动态绑定)。<br> <strong>常用方法</strong><ul><li>execute(String sql)：执行参数中的SQL，返回是否有结果集</li><li>executeQuery(String sql)：运行select语句，返回ResultSet结果集。</li><li>executeUpdate(String sql)：运行insert&#x2F;update&#x2F;delete操作，返回更新的行数。</li><li>addBatch(String sql)：把多条sql语句放到一个批处理中。</li><li>executeBatch()：向数据库发送一批sql语句执行。</li></ul></li><li><strong>PreparedStatement接口</strong><br> 继承自Statement接口，由preparedStatement创建，用于发送含有一个或多个参数的SQL语句。PreparedStatement对象比Statement对象的效率更高，由于实现了动态的参数绑定，所以可以防止SQL注入，所以我们一般都使用PreparedStatement。<br> <strong>常用方法</strong><ul><li>addBatch()：把当前sql语句加入到一个批处理中。</li><li>execute()：执行当前SQL，返回个boolean值。</li><li>executeUpdate()：运行insert&#x2F;update&#x2F;delete操作，返回更新的行数。</li><li>executeQuery()：执行当前的查询，返回一个结果集对象。</li><li>setDate(int parameterIndex,Date x)：向当前SQL语句中的指定位置绑定一个java.sql.Date值。</li><li>setDouble(int parameterIndex,double x)：向当前SQL语句中的指定位置绑定一个double值。</li><li>setFloat(int parameterIndex,float x)：向当前SQL语句中的指定位置绑定一个float值。</li><li>setInt(int parameterIndex,int x)：向当前SQL语句中的指定位置绑定一个int值。</li><li>setString(int parameterIndex,String x)：向当前SQL语句中的指定位置绑定一个String值。</li></ul></li><li><strong>ResultSet接口</strong><br> ResultSet用来暂时存放数据库查询操作所获得的结果集。<br> <strong>常用方法</strong><ul><li>getString(int index)、getString(String columnName)：获得在数据库里是varchar、char等类型的数据对象。</li><li>getFloat(int index)、getFloat(String columnName)：获得在数据库里是Float类型的数据对象。</li><li>getDate(int index)、getDate(String columnName)：获得在数据库里是Date类型的数据对象。</li><li>getBoolean(int index)、getBoolean(String columnName)：获得在数据库里是Boolean类型的数据对象。</li><li>getObject(int index)、getObject(String columnName)：获取在数据库里任意类型的数据对象。</li></ul></li></ol><h1 id="JDBC编写步骤"><a href="#JDBC编写步骤" class="headerlink" title="JDBC编写步骤"></a>JDBC编写步骤</h1><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240224175244.png" alt="image.png"></p><blockquote><p><em><strong>注：</strong></em> ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由ODBC驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h1 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h1><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240226163927.png" alt="image.png"><br><strong>环境：</strong><br>数据库Mysql5.7<br>数据库驱动版本5.1.48<br>数据库名itbz<br><strong>准备工作：</strong></p><ul><li>新建JavaProject工程</li><li>添加数据库驱动jar包（非常重要）</li><li>获取数据库连接对象</li></ul><h2 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 获取数据库连接测试类  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;  </span><br><span class="line">        <span class="comment">//连接mysql数据库的url  </span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/itbz?useSSL=false&quot;</span>;  </span><br><span class="line">        <span class="comment">//连接数据库的用户名  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;  </span><br><span class="line">        <span class="comment">//连接数据库的密码  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;ROOTLJY&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//通过反射实现数据库驱动的加载和注册  </span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//通过DriverManager对象获取数据库的连接对象  </span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, name, pwd);  </span><br><span class="line">        System.out.println(connection);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在加载com.mysql.jdbc.Driver类信息时，会执行静态块中的代码。在静态块中，数据库驱动会实例化自己并通过DriverManager的registerDriver方法，将自己注册到DriverManager驱动管理器中。</p><h1 id="Properties文件的使用"><a href="#Properties文件的使用" class="headerlink" title="Properties文件的使用"></a>Properties文件的使用</h1><h2 id="Properties文件介绍"><a href="#Properties文件介绍" class="headerlink" title="Properties文件介绍"></a>Properties文件介绍</h2><p>后缀为properties的文件是一种属性文件。这种文件以key&#x3D;value格式存储内容。Java中可以使用Properties工具类来读取这个文件。项目中会将一些配置信息放到properties文件中，所以properties文件经常作为配置文件来使用。</p><h2 id="Properties工具类"><a href="#Properties工具类" class="headerlink" title="Properties工具类"></a>Properties工具类</h2><p>Properties工具类，位于java.util包中，该工具类继承自<code>Hashtable&lt;Object,Object&gt;</code>。通过Properties工具类可以读取.properties类型的配置文件。</p><h2 id="Properties工具类中常用方法"><a href="#Properties工具类中常用方法" class="headerlink" title="Properties工具类中常用方法"></a>Properties工具类中常用方法</h2><p><code>load(InputStream is)</code><br>通过给定的输入流对象读取properties文件并解析。</p><p><code>getProperty(String key)</code><br>根据key获取对应的value。</p><blockquote><p><em><strong>注意：</strong></em><br>如果properties文件中含有中文，那么需要对idea进行设置。</p></blockquote><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240226183704.png" alt="image.png"></p><h2 id="操作properties文件"><a href="#操作properties文件" class="headerlink" title="操作properties文件"></a>操作properties文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * * 读取properties配置文件的测试类  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="comment">//实例化Properties对象  </span></span><br><span class="line">        Properties prop=<span class="keyword">new</span> <span class="title class_">Properties</span>();  </span><br><span class="line">        <span class="comment">//获取读取properties文件的输入流对象  </span></span><br><span class="line">        InputStream is=PropertiesTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;test.properties&quot;</span>);  </span><br><span class="line">        <span class="comment">//通过给定的输入流对象读取properties文件并解析  </span></span><br><span class="line">        prop.load(is);  </span><br><span class="line">        <span class="comment">//获取properties文件中的内容  </span></span><br><span class="line">        String value1=prop.getProperty(<span class="string">&quot;key1&quot;</span>);  </span><br><span class="line">        String value2=prop.getProperty(<span class="string">&quot;key2&quot;</span>);  </span><br><span class="line">        String value3=prop.getProperty(<span class="string">&quot;句子&quot;</span>);  </span><br><span class="line">        System.out.println(value1+<span class="string">&quot;: value1&quot;</span>);  </span><br><span class="line">        System.out.println(value2+<span class="string">&quot;: value2&quot;</span>);  </span><br><span class="line">        System.out.println(value3);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>properties文件：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 我是中国人  </span><br><span class="line">key1=ITBZ  </span><br><span class="line">key2=BJSXT  </span><br><span class="line">句子=我是中国人</span><br></pre></td></tr></table></figure><h1 id="优化获取数据库连接"><a href="#优化获取数据库连接" class="headerlink" title="优化获取数据库连接"></a>优化获取数据库连接</h1><p>将连接数据库时所需要的信息存放到properties文件中，可以解决硬编码的问题。<br><strong>properties文件内容</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 连接Mysql数据库的URL  </span><br><span class="line">url=jdbc:mysql://localhost:3306/itbz?useSSL=false  </span><br><span class="line"># 连接数据库的用户名  </span><br><span class="line">username=root  </span><br><span class="line"># 连接数据库的密码  </span><br><span class="line">pwd=root</span><br><span class="line"># 数据库驱动名称  </span><br><span class="line">driver=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p><strong>获取连接</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 优化获取数据库连接  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcTest2</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;  </span><br><span class="line">        <span class="comment">//实例化Properties对象  </span></span><br><span class="line">        Properties prop=<span class="keyword">new</span> <span class="title class_">Properties</span>();  </span><br><span class="line">        <span class="comment">//获取读取properties文件的字节输入流对象  </span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> jdbcTest2.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);  </span><br><span class="line">        <span class="comment">//读取properties文件对象并解析  </span></span><br><span class="line">        prop.load(is);  </span><br><span class="line">        <span class="comment">//获取连接数据库的URL  </span></span><br><span class="line">        String url=prop.getProperty(<span class="string">&quot;url&quot;</span>);  </span><br><span class="line">        <span class="comment">//获取连接数据库的用户名  </span></span><br><span class="line">        String name=prop.getProperty(<span class="string">&quot;username&quot;</span>);  </span><br><span class="line">        <span class="comment">//获取连接数据库的密码  </span></span><br><span class="line">        String pwd=prop.getProperty(<span class="string">&quot;pwd&quot;</span>);  </span><br><span class="line">        <span class="comment">//获取数据库驱动全名  </span></span><br><span class="line">        String driverName=prop.getProperty(<span class="string">&quot;driver&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//加载并注册驱动  </span></span><br><span class="line">        Class.forName(driverName);  </span><br><span class="line">        <span class="comment">//通过驱动管理器对象获取连接对象  </span></span><br><span class="line">        Connection connection= DriverManager.getConnection(url,name,pwd);  </span><br><span class="line">        System.out.println(connection);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装JDBC工具类"><a href="#封装JDBC工具类" class="headerlink" title="封装JDBC工具类"></a>封装JDBC工具类</h1><p><strong>properties文件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 连接Mysql数据库的URL  </span><br><span class="line">url=jdbc:mysql://localhost:3306/itbz?useSSL=false  </span><br><span class="line"># 连接数据库的用户名  </span><br><span class="line">username=root  </span><br><span class="line"># 连接数据库的密码  </span><br><span class="line">pwd=root</span><br><span class="line"># 数据库驱动名称  </span><br><span class="line">driver=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p><strong>JDBC工具类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Jdbc工具类  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String pwd;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            <span class="comment">//实例化Properties对象  </span></span><br><span class="line">            Properties prop=<span class="keyword">new</span> <span class="title class_">Properties</span>();  </span><br><span class="line">            <span class="comment">//获取读取properties文件的字节输入流对象  </span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> jdbcTest2.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);  </span><br><span class="line">            <span class="comment">//读取properties文件对象并解析  </span></span><br><span class="line">            prop.load(is);  </span><br><span class="line">            <span class="comment">//获取连接数据库的URL  </span></span><br><span class="line">            url=prop.getProperty(<span class="string">&quot;url&quot;</span>);  </span><br><span class="line">            <span class="comment">//获取连接数据库的用户名  </span></span><br><span class="line">            name=prop.getProperty(<span class="string">&quot;username&quot;</span>);  </span><br><span class="line">            <span class="comment">//获取连接数据库的密码  </span></span><br><span class="line">            pwd=prop.getProperty(<span class="string">&quot;pwd&quot;</span>);  </span><br><span class="line">            <span class="comment">//获取数据库驱动全名  </span></span><br><span class="line">            String driverName=prop.getProperty(<span class="string">&quot;driver&quot;</span>);  </span><br><span class="line">            <span class="comment">//加载并注册驱动  </span></span><br><span class="line">            Class.forName(driverName);  </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;    <span class="comment">//获取数据库连接对象  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;  </span><br><span class="line">        Connection connection=<span class="literal">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            connection = DriverManager.getConnection(url, name, pwd);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;  </span><br><span class="line">            throwables.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> connection;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//关闭连接对象  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(Connection connection)</span>&#123;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            connection.close();  </span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException throwables)&#123;  </span><br><span class="line">            throwables.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//提交事务  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(Connection connection)</span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            connection.commit();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;  </span><br><span class="line">            throwables.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//事务回滚  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(Connection connection)</span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            connection.rollback();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;  </span><br><span class="line">            throwables.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//关闭Statement对象  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeStatement</span><span class="params">(Statement statement)</span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            statement.close();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;  </span><br><span class="line">            throwables.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//关闭ResultSet对象  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResultSet</span><span class="params">(ResultSet resultSet)</span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            resultSet.close();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;  </span><br><span class="line">            throwables.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//DML操作时关闭资源  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource</span><span class="params">(Statement statement,Connection connection)</span>&#123;  </span><br><span class="line">        <span class="comment">//先关闭Statement对象  </span></span><br><span class="line">        closeStatement(statement);  </span><br><span class="line">        <span class="comment">//再关闭Connection对象  </span></span><br><span class="line">        closeConnection(connection);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//查询时关闭资源  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource</span><span class="params">(ResultSet resultSet,Statement statement,Connection connection)</span>&#123;  </span><br><span class="line">        <span class="comment">//先关闭ResultSet对象  </span></span><br><span class="line">        closeResultSet(resultSet);  </span><br><span class="line">        <span class="comment">//再关闭Statement对象  </span></span><br><span class="line">        closeStatement(statement);  </span><br><span class="line">        <span class="comment">//最后关闭Connection对象  </span></span><br><span class="line">        closeConnection(connection);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> JDBC </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="/posts/3006dc10.html"/>
      <url>/posts/3006dc10.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-include"><a href="#1-include" class="headerlink" title="1. #include&lt;vector&gt;"></a>1. <code>#include&lt;vector&gt;</code></h3><ul><li>vector是变长数组，支持随机访问，不支持在任意位置O(1)插入。为了保证效率，元素的增删一般都在末尾进行。</li><li>声明<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span><span class="comment">//头文件</span></span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;<span class="comment">//相当于一个长度动态变化的int数组</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b[<span class="number">233</span>];<span class="comment">//相当于第一维长233，第二维长度动态变化的int数组</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rec</span>&#123;...&#125;</span><br><span class="line">vector&lt;rec&gt; c;<span class="comment">//自定义的结构体类型也可以保存在vector中</span></span><br></pre></td></tr></table></figure></li><li>size&#x2F;empty<ul><li>size函数返回vector的实际长度(包含的元素个数)，empty函数返回一个bool类型，表明vector是否为空，二者的时间复杂度都是O(1)</li><li>所有的STL容器都支持这两个方法，含义也相同。</li></ul></li><li>clear函数把vector清空</li><li>迭代器就像STL容器的“指针”，可以用星号 <code>*</code>操作符解除引用。一个保存int的vector的迭代器声明方法为：<code>vector&lt;int&gt;::iterator it;</code><br>  vector的迭代器是“随机访问迭代器”，可以把vector的迭代器与一个整数相加减，其行为和指针的移动类似，可以把vector的两个迭代器相减，其结果也和指针相减类似，得到两个迭代器对应下标之间的距离</li><li>begin&#x2F;end:<ul><li>begin函数返回指向vector中第一个元素的迭代器。例如a是一个非空的vector，则<code>*a.begin()</code>与<code>a[0]</code>的作用相同。</li><li>所有的容器都可以视为一个“前闭后开”的结构，end函数返回vector的尾部，即第n个元素再往后的“边界”。<code>*a.end()</code>与<code>a[n]</code>都是越界访问，其中n&#x3D;a.size()。下面两份代码都遍历了<code>vector&lt;int&gt;a</code>，并输出它的所有元素。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator it=a.<span class="built_in">begin</span>();it!=a.<span class="built_in">end</span>();it++)cout&lt;&lt;*it&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li></ul></li><li>front&#x2F;back:<ul><li>front函数返回vector的第一个元素，等价于<code>*a.begin()</code>和<code>a[0]</code></li><li>back函数返回vector的最后一个元素，等价于<code>*(--a.end())</code>和<code>a[a.size()-1]</code></li></ul></li><li>push_back()和pop_back():<ul><li>a.push_back(x)把元素x插入到vector a的尾部</li><li>b.pop_back()删除vector b的最后一个元素</li></ul></li></ul><h3 id="2-include"><a href="#2-include" class="headerlink" title="2.#include&lt;queue&gt;"></a>2.<code>#include&lt;queue&gt;</code></h3><ul><li>头文件queue主要包括循环队列queue和优先队列priority_queue两个容器。</li><li>声明<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rec</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> rec&amp; t) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;t.a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">queue&lt;rec&gt; q;<span class="comment">//结构体中rec必须定义小于号</span></span><br><span class="line"><span class="comment">//大根堆重载小于号</span></span><br><span class="line"><span class="comment">//小根堆重载大于号</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt;q;<span class="comment">//大根堆</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt; b;<span class="comment">//小根堆</span></span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;c;</span><br></pre></td></tr></table></figure></li><li>循环队列queue<ul><li>push从队尾插入</li><li>pop从队头弹出</li><li>front返回队头元素</li><li>back返回队尾元素</li></ul></li><li>优先队列priority_queue<ul><li>push把元素插入堆</li><li>pop删除堆顶元素(最大值)</li><li>top查询堆顶元素(最大值)</li></ul></li></ul><h3 id="3-include"><a href="#3-include" class="headerlink" title="3.#include&lt;stack&gt;"></a>3.<code>#include&lt;stack&gt;</code></h3><ul><li>头文件stack包含栈，声明和前面的容器类似</li><li>push向栈顶插入</li><li>pop弹出栈顶元素</li></ul><h3 id="4-include"><a href="#4-include" class="headerlink" title="4.#include&lt;deque&gt;"></a>4.<code>#include&lt;deque&gt;</code></h3><ul><li>双端队列deque是一个支持在两端高效插入或删除元素的连续线性存储空间。它就像是vector和queue的结合。与vector相比，deque在头部增删元素仅需要O(1)的时间，与queue相比，deque像数组一样支持随机访问。</li><li>[]随机访问</li><li>begin&#x2F;end返回deque的头&#x2F;尾迭代器</li><li>front&#x2F;back队头&#x2F;队尾元素</li><li>push_back从队尾入队</li><li>push_front从队头入队</li><li>pop_back从队尾出队</li><li>pop_front从队头出队</li><li>clear清空队列</li></ul><h3 id="5-include"><a href="#5-include" class="headerlink" title="5.#include&lt;set&gt;"></a>5.<code>#include&lt;set&gt;</code></h3><ul><li>头文件set主要包含set和multiset两个容器，分别是“有序集合”和“有序多重集合”，即前者的元素不能重复，而后者可以包含若干个相等的元素。set和multiset的内部实现是一颗红黑树，它们支持的函数基本相同。</li><li>声明<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s;<span class="comment">//元素不能重复</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rec</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Rec&amp; t) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;t.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;rec&gt; s;<span class="comment">//结构体rec中必须定义小于号</span></span><br><span class="line">multiset&lt;<span class="type">double</span>&gt; s;<span class="comment">//元素可以重复</span></span><br></pre></td></tr></table></figure></li><li>size&#x2F;empty&#x2F;clear:与vector类似</li><li>迭代器:<ul><li>set和multiset的迭代器称为“双向访问迭代器”，不支持“随机访问”，支持星号<code>*</code>解除引用，仅支持“++”和“–”两个与算术相关的操作。设it是一个迭代器，例如<code>set&lt;int&gt;::iterator it;</code>,若把it++，则it会指向“下一个”元素。这里的“下一个”元素是指元素从小到大排序的结果中，排在it下一名的元素。同理，若把it–，则it将会指向排在“上一个”的元素。</li></ul></li><li>begin&#x2F;end:返回集合的首、尾迭代器，时间复杂度均为O(1)<ul><li>s.begin()是指向集合中最小元素的迭代器</li><li>s.end()是指向集合中最大元素的下一个位置的迭代器。换言之，就像vector一样，是一个“前闭后开”的形式。因此–s.end()是指向集合中最大元素的迭代器。</li></ul></li><li>insert<ul><li>s.insert(x)把一个元素x插入到集合s中，时间复杂度为O(logn)</li><li>在set中，若元素已存在，则不会重复插入该元素，对集合的状态无影响</li></ul></li><li>find<ul><li>s.find(x)在集合s中查找等于x的元素，并返回指向该元素的&#x3D;&#x3D;迭代器&#x3D;&#x3D;。若不存在，则返回s.end()，时间复杂度为O(logn)</li><li><code>if(s.find(x)==s.end())//判断x在s中是否存在</code></li></ul></li><li>lower_bound&#x2F;upper_bound<ul><li>这两个函数的用法与find类似，但查找的条件略有不同，时间复杂度为O(logn)</li><li>s.lower_bound(x)查找&#x3D;&#x3D;大于等于&#x3D;&#x3D;x的元素中最小的一个，并返回指向该元素的迭代器。</li><li>s.upper_bound(x)查找&#x3D;&#x3D;大于&#x3D;&#x3D;x的元素中最小的一个，并返回指向该元素的迭代器。</li></ul></li><li>erase<ul><li>设it是一个迭代器，s.erase(it)从s中删除迭代器it指向的元素，时间复杂度为O(logn)</li><li>设x是一个元素，s.erase(x)从s中删除所有等于x的元素，时间复杂度为O(k+logn)，其中k是被删除的元素个数</li></ul></li><li>count<ul><li>s.count(x)返回集合s中等于x的元素个数，时间复杂度为O(k+logn)，其中k为元素x的个数</li></ul></li></ul><h3 id="6-include"><a href="#6-include" class="headerlink" title="6.include&lt;map&gt;"></a>6.<code>include&lt;map&gt;</code></h3><ul><li>map容器是一个键值对key-value的映射，其内部实现是一颗以key为关键码的红黑树。Map的key和value可以是任意类型，其中key必须定义小于号运算符。</li><li>声明<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;key_type,value_type&gt;name;</span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line">map&lt;<span class="type">long</span>,<span class="type">long</span>,<span class="type">bool</span>&gt;vis;</span><br><span class="line">map&lt;string,<span class="type">int</span>&gt; hash;</span><br><span class="line">map&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;<span class="type">int</span>&gt;&gt;test;</span><br></pre></td></tr></table></figure></li><li>size&#x2F;empty&#x2F;clear&#x2F;begin&#x2F;end均与set类似</li><li>insert&#x2F;erase：与set类似，但其参数均是pair&lt;key_type,value_type&gt;</li><li>find：h.find(x)在变量名为h的map中查找key为x的二元组。</li><li><code>[]</code>操作符：<ul><li><code>h[key]</code>返回key映射的value的引用，时间复杂度为O(logn)</li><li><code>[]</code>操作符是map最吸引人的地方。我们可以很方便地通过<code>h[key]</code>来得到key对应的value，还可以对<code>h[key]</code>进行赋值操作，改变key对应的value。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACWing797&amp;ACWing798</title>
      <link href="/posts/ea612fc1.html"/>
      <url>/posts/ea612fc1.html</url>
      
        <content type="html"><![CDATA[<h1 id="ACWing797-差分"><a href="#ACWing797-差分" class="headerlink" title="ACWing797.差分"></a>ACWing797.差分</h1><p>输入一个长度为n的整数序列。<br>接下来输入m个操作，每个操作包含三个整数l，r，c，表示将序列中<code>[l,r]</code>之间的每个数加上c。<br>请你输出进行完所有操作后的序列。<br><strong>输入格式：</strong><br>第一行包含两个整数n和m。<br>第二行包含n个整数，表示整数序列。<br>接下来m行，每行包三个整数l，r，c，表示一个操作。<br><strong>输出格式：</strong><br>共一行，包含n个整数，表示最终序列。</p><hr><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240220222727.png" alt="image.png"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一维差分  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;  </span><br><span class="line"><span class="type">int</span> a[N],b[N];  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> c)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    b[l]+=c;  </span><br><span class="line">    b[r+<span class="number">1</span>]-=c;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> n,m;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);  </span><br><span class="line">    <span class="comment">//初始化差分数组  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">insert</span>(i,i,a[i]);  </span><br><span class="line">    <span class="keyword">while</span>(m--)  </span><br><span class="line">    &#123;  </span><br><span class="line">    <span class="type">int</span> l,r,c;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;c);  </span><br><span class="line">    <span class="built_in">insert</span>(l,r,c);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//差分数组求前缀和等价于操作后的原数组  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">    a[i]=a[i<span class="number">-1</span>]+b[i];  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ACWing798-差分矩阵"><a href="#ACWing798-差分矩阵" class="headerlink" title="ACWing798.差分矩阵"></a>ACWing798.差分矩阵</h1><p>输入一个n行m列的整数矩阵，再输入q个操作，每个操作包含五个整数x1,y1,x2,y2,c，其中(x1,y1)和(x2,y2)表示一个子矩阵的左上角坐标和右下角坐标。<br>每个操作都要将选中的子矩阵中的每个元素的值加上c。<br>请你将进行完所有操作后的矩阵输出。<br><strong>输入格式：</strong><br>第一行包含整数n,m,q。<br>接下来n行，每行包含m个整数，表示整数矩阵。<br>接下来q行，每行包含5个整数x1,y1,x2,y2,c，表示一个操作。<br><strong>输出格式：</strong><br>共n行，每行m个整数，表示所有操作进行完毕后的最终矩阵。</p><hr><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240220232117.png" alt="image.png"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二维差分  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;  </span><br><span class="line"><span class="type">int</span> n,m,q;  </span><br><span class="line"><span class="type">int</span> a[N][N],b[N][N];  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2,<span class="type">int</span> c)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    b[x1][y1]+=c;  </span><br><span class="line">    b[x2+<span class="number">1</span>][y1]-=c;  </span><br><span class="line">    b[x1][y2+<span class="number">1</span>]-=c;  </span><br><span class="line">    b[x2+<span class="number">1</span>][y2+<span class="number">1</span>]+=c;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);  </span><br><span class="line">    <span class="comment">//初始化二维差分数组  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ;i++) &#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;  </span><br><span class="line">    <span class="built_in">insert</span>(i,j,i,j,a[i][j]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span>(q--)  </span><br><span class="line">    &#123;  </span><br><span class="line">    <span class="type">int</span> x1,y1,x2,y2,c;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;c);  </span><br><span class="line">    <span class="built_in">insert</span>(x1,y1,x2,y2,c);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)  </span><br><span class="line">    &#123;  </span><br><span class="line">    a[i][j]=a[i<span class="number">-1</span>][j]+a[i][j<span class="number">-1</span>]+b[i][j]-a[i<span class="number">-1</span>][j<span class="number">-1</span>];<span class="comment">//求前缀和  </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACWing </tag>
            
            <tag> 算法 </tag>
            
            <tag> 差分 </tag>
            
            <tag> 二维差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACWing795&amp;ACWing796</title>
      <link href="/posts/f03ba924.html"/>
      <url>/posts/f03ba924.html</url>
      
        <content type="html"><![CDATA[<h1 id="ACWing795-前缀和"><a href="#ACWing795-前缀和" class="headerlink" title="ACWing795.前缀和"></a>ACWing795.前缀和</h1><p>输入一个长度为n的整数序列。<br>接下来再输入m个询问，每个询问输入一对l,r。<br>对于每个询问，输出原序列中从第l个数到第r个数的和。<br><strong>输入格式：</strong><br>第一行包含两个整数n和m。<br>第二行包含n个整数，表示整数数列。<br>接下来m行，每行包含两个整数l和r，表示一个询问的区间范围。<br><strong>输出格式：</strong><br>共m行，每行输出一个询问的结果。</p><hr><p><em><strong>一维前缀和：</strong></em></p><ol><li><code>S[i]=a[1]+a[2]+...+a[i]</code></li><li><code>sum(L,R)=a[L]+a[L+1]+...+a[R]=s[R]-s[L-1]</code></li></ol><p><em><strong>前缀和处理步骤：</strong></em></p><ol><li>预处理前缀和数组；</li><li>用公式求区间和。</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一维前缀和  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1E6</span>+<span class="number">10</span>;  </span><br><span class="line"><span class="type">int</span> a[N],s[N];  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> n,m;  </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;  </span><br><span class="line">    <span class="comment">//防止L-1溢出  </span></span><br><span class="line">    <span class="comment">//数组下标从1开始  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s[i]=s[i<span class="number">-1</span>]+a[i];  </span><br><span class="line">    <span class="keyword">while</span>(m--)  </span><br><span class="line">    &#123;  </span><br><span class="line">    <span class="type">int</span> l,r;  </span><br><span class="line">    cin&gt;&gt;l&gt;&gt;r;  </span><br><span class="line">    cout&lt;&lt;s[r]-s[l<span class="number">-1</span>]&lt;&lt;endl;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ACWing796-子矩阵的和"><a href="#ACWing796-子矩阵的和" class="headerlink" title="ACWing796.子矩阵的和"></a>ACWing796.子矩阵的和</h1><p>输入一个n行m列的整数矩阵，再输入q个询问，每个询问包含四个整数x1,y1,x2,y2，表示一个子矩阵的左上角坐标和右下角坐标。对于每个询问输出子矩阵中所有数的和。<br><strong>输入格式：</strong><br>第一行包含三个整数n,m,q。<br>接下来n行，每行包含m个整数，表示整数矩阵。<br>接下来q行，每行包含四个整数x1,y1,x2,y2，表示一组询问。<br><strong>输出格式：</strong><br>共q行，每行输出一个询问的结果。</p><hr><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240220215245.png" alt="image.png"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二维前缀和  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;  </span><br><span class="line"><span class="type">int</span> n,m,q;  </span><br><span class="line"><span class="type">int</span> a[N][N],s[N][N];  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//初始化前缀和数组  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)  </span><br><span class="line">    &#123;  </span><br><span class="line">    s[i][j]=s[i<span class="number">-1</span>][j]+s[i][j<span class="number">-1</span>]+a[i][j]-s[i<span class="number">-1</span>][j<span class="number">-1</span>];<span class="comment">//求前缀和  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span>(q--)  </span><br><span class="line">    &#123;  </span><br><span class="line">    <span class="type">int</span> x1,y1,x2,y2;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);  </span><br><span class="line">    <span class="comment">//计算(x1,y1),(x2,y2)之间的区间和  </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s[x2][y2]-s[x2][y1<span class="number">-1</span>]-s[x1<span class="number">-1</span>][y2]+s[x1<span class="number">-1</span>][y1<span class="number">-1</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACWing </tag>
            
            <tag> 算法 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 二维前缀和 </tag>
            
            <tag> 子矩阵的和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACWing788</title>
      <link href="/posts/739822c9.html"/>
      <url>/posts/739822c9.html</url>
      
        <content type="html"><![CDATA[<h1 id="ACWing788-逆序对的数量"><a href="#ACWing788-逆序对的数量" class="headerlink" title="ACWing788.逆序对的数量"></a>ACWing788.逆序对的数量</h1><p>给定一个长度为n的整数数列，请你计算 数列中的逆序对的数量。<br>逆序对的定义如下：对于数列的第i个和第j个元素，如果满足<code>i&lt;j</code>且<code>a[i]&gt;a[j]</code>，则其为一个逆序对；否则不是。<br><strong>输入格式：</strong><br>第一行包含整数n，表示数列的长度。<br>第二行包含n个整数，表示整个数列。<br><strong>输出格式：</strong><br>输出一个整数，表示逆序对的个数。<br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240220203020.png" alt="image.png"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逆序对的数量  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;  </span><br><span class="line"><span class="type">int</span> n;  </span><br><span class="line"><span class="type">int</span> q[N],tmp[N];  </span><br><span class="line"><span class="function">LL <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;  </span><br><span class="line">    LL res= <span class="built_in">merge_sort</span>(l,mid)+ <span class="built_in">merge_sort</span>(mid+<span class="number">1</span>,r);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//归并的过程  </span></span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>,i=l,j=mid+<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)  </span><br><span class="line">    &#123;  </span><br><span class="line">    <span class="keyword">if</span>(q[i]&lt;=q[j])tmp[k++]=q[i++];  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">    tmp[k++]=q[j++];  </span><br><span class="line">    res=res+mid-i+<span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//扫尾  </span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)tmp[k++]=q[i++];  </span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)tmp[k++]=q[j++];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//物归原主  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++)q[i]=tmp[j];  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);  </span><br><span class="line">    cout&lt;&lt;<span class="built_in">merge_sort</span>(<span class="number">0</span>,n<span class="number">-1</span>)&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用到的归并排序模板如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//归并排序模板</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1E6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N],tmp[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q,l,mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>,i=l,j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;=q[j])tmp[k++]=q[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++]=q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扫尾</span></span><br><span class="line">    <span class="keyword">while</span> (i&lt;=mid)tmp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)tmp[k++]=q[j++];</span><br><span class="line">    <span class="comment">//物归原主</span></span><br><span class="line">    <span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++)q[i]=tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACWing </tag>
            
            <tag> 算法 </tag>
            
            <tag> 归并排序 </tag>
            
            <tag> 逆序对 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八股文</title>
      <link href="/posts/f5914f50.html"/>
      <url>/posts/f5914f50.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h3 id="get和post的区别-重要，面试常问"><a href="#get和post的区别-重要，面试常问" class="headerlink" title="get和post的区别(重要，面试常问)"></a>get和post的区别(重要，面试常问)</h3><ol><li>get在浏览器回退时是无害的，而post会再次提交请求。</li><li>get产生的url地址可以被bookmark(添加到书签中)，而post不可以。</li><li>get请求会被浏览器主动cache，而post不会，除非手动设置。</li><li>get请求参数会被完整保留在浏览器历史记录里，而post中的参数不会被保留。</li><li>get请求在url中传送的参数是有长度限制的，而post则没有。对参数的数据类型get只接受ASCII字符，而post即可是字符也可是字节。</li><li>get比post更不安全，因为参数直接暴露在url上，所以不能用来传递敏感信息。</li><li>get参数通过url传递，post则放在请求体中。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 八股文 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb学习</title>
      <link href="/posts/6af6e090.html"/>
      <url>/posts/6af6e090.html</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet技术"><a href="#Servlet技术" class="headerlink" title="Servlet技术"></a>Servlet技术</h1><h2 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h2><p>Servlet是Servlet Applet的简称，称为服务端小程序，是JavaEE平台下的技术标准，基于Java语言编写的服务端程序。Web容器或应用服务器实现了Servlet标准所以Servlet需要运行在Web容器或应用服务器中，Servlet主要功能在于能够在服务器中执行并生成数据。 </p><p><strong>技术特点：</strong> Servlet使用<em><strong>单进程多线程</strong></em>方式运行。<br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218152516.png" alt="image.png"><br><strong>Servlet在应用程序中的位置：</strong> 在web服务器和数据库之间。<br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218152616.png" alt="image.png"></p><h2 id="第一个Servlet"><a href="#第一个Servlet" class="headerlink" title="第一个Servlet"></a>第一个Servlet</h2><p><strong>编写第一个Servlet</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junylu.servlet;</span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span><span class="keyword">throws</span> ServletException,IOException&#123;  </span><br><span class="line">        <span class="comment">//拿到字符输出流对象  </span></span><br><span class="line">        PrintWriter pw=response.getWriter();  </span><br><span class="line">        pw.println(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>);  </span><br><span class="line">        pw.println(<span class="string">&quot;&lt;html lang=en&gt;&quot;</span>);  </span><br><span class="line">        pw.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);  </span><br><span class="line">        pw.println(<span class="string">&quot;&lt;meta charset=UTF-8&gt;&quot;</span>);  </span><br><span class="line">        pw.println(<span class="string">&quot;&lt;title&gt;Document&lt;/title&gt;&quot;</span>);  </span><br><span class="line">        pw.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);  </span><br><span class="line">        pw.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);  </span><br><span class="line">        pw.println(<span class="string">&quot;&lt;font color=blue&gt;helloworld&lt;/font&gt;&quot;</span>);  </span><br><span class="line">        pw.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);  </span><br><span class="line">        pw.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);  </span><br><span class="line">        pw.flush();  </span><br><span class="line">        pw.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译Servlet</strong><br><code>javac -classpath &quot;D:\apache-tomcat-9.0.85\lib\servlet-api.jar&quot; HelloWorld.java</code><br><strong>创建web.xml</strong><br>Web项目的部署描述文件，是javaweb工程的配置文件，通过web.xml文件可以配置servlet、filter等技术。Tomcat启动时会先解析该配置文件获取项目的配置信息。<br><strong>web.xml文件中的头信息</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在web.xml文件中配置Servlet</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.junylu.servlet.HelloWorld<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloworld.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>部署Servlet</strong><br>web工程目录结构：<br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218160517.png" alt="image.png"></p><h2 id="Tomcat运行过程"><a href="#Tomcat运行过程" class="headerlink" title="Tomcat运行过程"></a>Tomcat运行过程</h2><ol><li>用户访问localhost:8080&#x2F;servletdemo&#x2F;helloworld.do，请求被发送到Tomcat，被监听8080端口并处理HTTP&#x2F;1.1协议的connector获得。</li><li>connector把该请求交给它所在的Service的Engine来处理，并等待Engine的回应。</li><li>Engine获得请求localhost:8080&#x2F;servletdemo&#x2F;helloworld.do，匹配所有的虚拟主机host。</li><li>Engine匹配到名为localhost的host虚拟主机来处理&#x2F;servletdemo&#x2F;helloworld.do请求（即使匹配不到会将请求交给默认host处理）。</li><li>匹配到的context获得请求&#x2F;helloworld.do。</li><li>构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用HelloWorld的doGet()或doPost()。执行业务逻辑、数据存储等程序。</li><li>context把执行完之后的结果通过HttpServletResponse对象返回给host。</li><li>host把HttpServletResponse返回给Engine。</li><li>Engine把HttpServletResponse对象返回connector。</li><li>connector把HttpServletResponse对象返回给客户Browser。<br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218163616.png" alt="image.png"></li></ol><h2 id="Servlet继承结构"><a href="#Servlet继承结构" class="headerlink" title="Servlet继承结构"></a>Servlet继承结构</h2><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218170924.png" alt="image.png"><em><strong>Servlet接口</strong></em></p><ol><li><code>init()</code>，创建Servlet对象后立即调用该方法完成一些初始化工作。</li><li><code>service()</code>，处理客户端请求，执行业务操作，利用响应对象响应客户端请求。</li><li><code>destroy()</code>，在销毁Servlet对象之前调用该方法，释放资源。</li><li><code>getServletConfig()</code>，ServletConfig是容器向Servlet传递参数的载体。</li><li><code>getServletInfo()</code>，获取Servlet相关信息。<br><em><strong>ServletConfig接口</strong></em></li><li><code>String getServletName()</code>，返回Servlet的名字，即web.xml中<code>&lt;servlet-name&gt;</code>元素的值。</li><li><code>ServletContext getServletContext()</code>，返回一个代表当前web应用的<code>ServletContext</code>对象。</li><li><code>String getInitParameter(String name)</code>，根据初始化参数名返回对应的初始化参数值。</li><li><code>Enumeration getInitParameterNames()</code>，返回一个<code>Enumeration</code>对象，其中包含了所有的初始化参数名。<br><em><strong>GenericServlet抽象类</strong></em><br>GenericServlet是实现了Servlet接口的抽象类。在GenericServlet中进一步定义了Servlet接口的具体实现，其设计的目的是为了和应用层协议解耦，在GenericServlet中包含一个Service抽象方法。<br><em><strong>HttpServlet类</strong></em><br>继承自GenericServlet，针对于处理HTTP协议的请求所定制。在HttpServlet的<code>service()</code>方法中已经把ServletRequest和ServletResponse转为HttpServletRequest和HttpServletResponse。直接使用HttpServletRequest和HttpServletResponse，不再需要强转。实际开发中，直接继承HttpServlet，并根据请求方式复写<code>doXxx()</code>方法即可。</li></ol><h2 id="Servlet生命周期（面试题）"><a href="#Servlet生命周期（面试题）" class="headerlink" title="Servlet生命周期（面试题）"></a>Servlet生命周期（面试题）</h2><p>Servlet的生命周期是由容器管理的，分别经历三阶段：</p><ol><li><code>init()</code>：初始化</li><li><code>service()</code>：服务</li><li><code>destroy()</code>：销毁<br>当客户端浏览器第一次请求Servlet时，容器就会实例化这个Servlet，然后调用一次init方法，并在新的线程中执行<code>service()</code>方法处理请求。<code>service()</code>执行完毕后容器不会销毁这个Servlet而是做缓存处理，当客户端浏览器再次请求这个Servlet时，容器就会从缓存中直接找打这个Servlet对象，并再一次在新的线程中执行<code>service()</code>方法。当容器在销毁Servlet之前调用一次destroy()方法。</li></ol><h2 id="Servlet处理请求的原理"><a href="#Servlet处理请求的原理" class="headerlink" title="Servlet处理请求的原理"></a>Servlet处理请求的原理</h2><p>当浏览器基于get方式请求我们创建servlet时，我们自定义的servlet中的<code>doGet()</code>方法会被执行。<code>doGet()</code>方法能够执行并处理get请求的原因是，容器在启动时会解析web工程中WEB-INF目录中的web.xml文件，在该文件中我们配置了servlet与url的绑定，容器通过对请求的解析可以获取请求资源的url，然后找到与该url绑定的servlet并做实例化处理(注意：只实例化一次，如果在缓存中能够找到这个servlet就不会在做实例化处理)。在实例化时会使用servlet接口类型作为引用类型的定义，并调用一次init方法，由于GenericServlet中重写了该方法，所以最终执行的是GenericServlet中的init方法，(GenericServlet中的init方法是一个空的方法体)，然后在新的线程中调用service方法。由于在HttpServlet中重写了service方法，所以最终执行的是HttpServlet中的service方法。在service方法中通过<code>request.getMethod()</code>获取到请求方式进行判断，如果是get方式请求就执行<code>doGet()</code>方法，如果是post方式请求就执行<code>doPost()</code>方法。如果是基于get方式提交的，并且在我们的servlet中又重写了HttpServlet中的<code>doGet()</code>方法，那么最终会根据java的多态特性转而执行我们自定义的servlet中的<code>doGet()</code>方法。</p><h2 id="Servlet的作用"><a href="#Servlet的作用" class="headerlink" title="Servlet的作用"></a>Servlet的作用</h2><ol><li>获取用户提交的数据</li><li>获取浏览器附加的信息</li><li>处理数据（访问数据库或调用接口）</li><li>给浏览器产生一个响应</li><li>在响应中添加附加信息</li></ol><h2 id="在IDEA中创建Web工程"><a href="#在IDEA中创建Web工程" class="headerlink" title="在IDEA中创建Web工程"></a>在IDEA中创建Web工程</h2><blockquote><p><em><strong>注：</strong></em> 社区版无法创建web工程，必须使用最终版。</p></blockquote><p>三个步骤：</p><ol><li>创建web工程</li><li>添加servlet-api.jar</li><li>配置tomcat<br><strong>在IDEA创建Web工程</strong><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218230549.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218230715.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218230735.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218230836.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218231005.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218231102.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218231204.png" alt="image.png"><br><strong>添加servlet-api.jar</strong><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218231354.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218231514.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218231540.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218231617.png" alt="image.png"><br><strong>在IDEA中配置Tomcat</strong><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218231719.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218231819.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218231942.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218232006.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218232035.png" alt="image.png"><br><strong>在Web工程中编写Servlet</strong><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218232202.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218232235.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218232435.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240218232725.png" alt="image.png"></li></ol><h2 id="HttpServletRequest对象"><a href="#HttpServletRequest对象" class="headerlink" title="HttpServletRequest对象"></a>HttpServletRequest对象</h2><p>HttpServletRequest对象代表客户端浏览器的请求，当客户端浏览器通过HTTP协议访问服务器时。HTTP请求中的所有信息都会被Tomcat所解析并封装在这个对象之中，通过这个对象提供的方法，可以获得客户端请求的所有信息。</p><h3 id="获取请求信息"><a href="#获取请求信息" class="headerlink" title="获取请求信息"></a>获取请求信息</h3><p><code>req.getRequestURL()</code><br>返回客户端浏览器发出请求时的完整URL。<br><code>req.getRequestURI()</code><br>返回请求行中指定资源部分。<br><code>req.getRemoteAddr()</code><br>返回发出请求的客户机的IP地址。<br><code>req.getLocalAddr()</code><br>返回服务端的IP地址。<br><code>req.getLocalPort()</code><br>返回服务端监听端口。</p><h3 id="获取请求数据"><a href="#获取请求数据" class="headerlink" title="获取请求数据"></a>获取请求数据</h3><p><strong>根据key获取指定value</strong><br><code>req.getParameter(&quot;key&quot;)</code><br>根据key获取对应的value，返回一个字符串。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str=req.getParameter(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="获取复选框-checkbox组件-中的值"><a href="#获取复选框-checkbox组件-中的值" class="headerlink" title="获取复选框(checkbox组件)中的值"></a>获取复选框(checkbox组件)中的值</h3><p><code>req.getParameterValues(&quot;checkboxkey&quot;);</code><br>获取复选框(checkbox组件)中的值，返回一个字符串数组。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] userlikes=req.getParameterValues(<span class="string">&quot;checkboxkey&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="获取所有提交数据的key"><a href="#获取所有提交数据的key" class="headerlink" title="获取所有提交数据的key"></a>获取所有提交数据的key</h3><p><code>req.getParameterNames()</code><br>获取请求中所有数据的key，该方法返回一个枚举类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;String&gt; parameterNames=req.getParameterNames();</span><br></pre></td></tr></table></figure><h3 id="使用Map结构获取提交数据"><a href="#使用Map结构获取提交数据" class="headerlink" title="使用Map结构获取提交数据"></a>使用Map结构获取提交数据</h3><p><code>req.getParameterMap()</code><br>获取请求中所有的数据并存放到一个<code>Map</code>结构中，该方法返回一个<code>Map</code>，其中<code>key</code>为<code>String</code>类型，<code>value</code>为<code>String[]</code>类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; parameterMap=req.getParameterMap();</span><br></pre></td></tr></table></figure><h3 id="设置请求编码"><a href="#设置请求编码" class="headerlink" title="设置请求编码"></a>设置请求编码</h3><p><code>req.setCharacterEncoding(&quot;utf8&quot;)</code><br>请求的数据包基于字节在网络上传输，Tomcat接收到请求的数据包后会将数据包中的字节转换为字符。在Tomcat中使用的是ISO-8859-1的单字节编码完成字节与字符的转换，所以数据中含有中文就会出现乱码，可以通过<code>req.setCharacterEncoding(&quot;utf8&quot;)</code>方法来对提交的数据根据指定的编码方式重新做编码处理。</p><h3 id="资源访问路径"><a href="#资源访问路径" class="headerlink" title="资源访问路径"></a>资源访问路径</h3><p><strong>绝对路径</strong><br>绝对路径访问资源表示直接以“&#x2F;”作为项目的Context Path。该方式适用于以“&#x2F;”作为项目的Context Path。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/getInfo.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>相对路径</strong><br>相对路径访问资源表示会相对于项目的Context Path作为相对路径。该方式适用于为项目指定的具体的Context Path。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;getInfo.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取请求头信息"><a href="#获取请求头信息" class="headerlink" title="获取请求头信息"></a>获取请求头信息</h3><p><code>req.getHeader(&quot;headerKey&quot;)</code><br>根据请求头中的key获取对应的value。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">headerValue</span> <span class="operator">=</span>req.getHeader(<span class="string">&quot;headerKey&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>req.getHeaderNames()</code><br>获取请求头中所有的key，该方法返回枚举类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;String&gt; headerNames=req.getHeaderNames();</span><br></pre></td></tr></table></figure><h3 id="获取请求头案例"><a href="#获取请求头案例" class="headerlink" title="获取请求头案例"></a>获取请求头案例</h3><p>需求：编写一个servlet，如果浏览器的语言是zh-CN，显示“你好，聪明的中国人！”，如果浏览器的语言设置为en-US，那么则显示“Hello，American”。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junylu;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 编写一个servlet，如果浏览器的语言是zh-CN，显  </span></span><br><span class="line"><span class="comment"> * 示“你好，聪明的中国人！”，如果浏览器的语言设置为en-US，那么则  </span></span><br><span class="line"><span class="comment"> * 显示“Hello，American”  </span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LanguageExampleServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">        <span class="comment">//获取浏览器中所支持的语言  </span></span><br><span class="line">        String language=req.getHeader(<span class="string">&quot;Accept-Language&quot;</span>);  </span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);  </span><br><span class="line">        PrintWriter pw=resp.getWriter();  </span><br><span class="line">        <span class="keyword">if</span>(language.startsWith(<span class="string">&quot;zh-CN&quot;</span>))&#123;  </span><br><span class="line">            pw.println(<span class="string">&quot;你好，聪明的中国人！&quot;</span>);  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(language.startsWith(<span class="string">&quot;en-US&quot;</span>))&#123;  </span><br><span class="line">            pw.println(<span class="string">&quot;Hello,American&quot;</span>);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            pw.println(<span class="string">&quot;对不起，我不认识你！&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        pw.flush();  </span><br><span class="line">        pw.close();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpServletRequest对象的生命周期"><a href="#HttpServletRequest对象的生命周期" class="headerlink" title="HttpServletRequest对象的生命周期"></a>HttpServletRequest对象的生命周期</h3><p>当有请求到达Tomcat时，Tomcat会创建HttpServletRequest对象，并将该对象通过参数的方式传递到我们servlet的方法中，当处理请求完毕并产生响应后该对象生命周期结束。</p><h2 id="HttpServletResponse对象"><a href="#HttpServletResponse对象" class="headerlink" title="HttpServletResponse对象"></a>HttpServletResponse对象</h2><p>HttpServletResponse对象代表了服务器的响应。这个对象中封装了响应客户端浏览器的流对象，以及向客户端浏览器响应的响应头、响应数据、响应状态码等信息。</p><h3 id="设置响应类型"><a href="#设置响应类型" class="headerlink" title="设置响应类型"></a>设置响应类型</h3><p><code>resp.setContentType(&quot;MIME&quot;);</code>该方法可通过MIME-Type设置响应类型。</p><table><thead><tr><th>Type</th><th>Meaning</th></tr></thead><tbody><tr><td>application&#x2F;msword</td><td>Microsoft Word document</td></tr><tr><td>application&#x2F;octet-stream</td><td>Unrecognized or binary data</td></tr><tr><td>application&#x2F;pdf</td><td>Acrobat(.pdf) file</td></tr><tr><td>application&#x2F;postscript</td><td>PostScript file</td></tr><tr><td>application&#x2F;vnd.lotus-notes</td><td>Lotus Notes file</td></tr><tr><td>application&#x2F;vnd.ms-excel</td><td>Excel spreadsheet</td></tr><tr><td>application&#x2F;vnd.ms-powerpoint</td><td>Power Point presentation</td></tr><tr><td>application&#x2F;x-gzip</td><td>Gzip archive</td></tr><tr><td>application&#x2F;x-java-archive</td><td>JAR file</td></tr><tr><td>application&#x2F;x-java-serialized-object</td><td>Serialized Java object</td></tr><tr><td>application&#x2F;x-java-vm</td><td>Java bytecode(.class) file</td></tr><tr><td>application&#x2F;zip</td><td>Zip archive</td></tr><tr><td>application&#x2F;json</td><td>JSON</td></tr><tr><td>audio&#x2F;basic</td><td>Sound file in .au or .snd format</td></tr><tr><td>audio&#x2F;midi</td><td>MIDI sound file</td></tr><tr><td>audio&#x2F;x-aiff</td><td>AIFF sound file</td></tr><tr><td>audio&#x2F;x-wav</td><td>Microsoft Windows sound file</td></tr><tr><td>image&#x2F;gif</td><td>GIF image</td></tr><tr><td>image&#x2F;jpeg</td><td>JPEG image</td></tr><tr><td>image&#x2F;png</td><td>PNG image</td></tr><tr><td>image&#x2F;tiff</td><td>TIFF image</td></tr><tr><td>image&#x2F;x-xbitmap</td><td>X Windows bitmap image</td></tr><tr><td>text&#x2F;css</td><td>HTML cascading style sheet</td></tr><tr><td>text&#x2F;html</td><td>HTML document</td></tr><tr><td>text&#x2F;plain</td><td>Plain text</td></tr><tr><td>text&#x2F;xml</td><td>XML</td></tr><tr><td>video&#x2F;mpeg</td><td>MPEG video clip</td></tr><tr><td>video&#x2F;quicktime</td><td>QuickTime video clip</td></tr></tbody></table><h3 id="设置字符型响应"><a href="#设置字符型响应" class="headerlink" title="设置字符型响应"></a>设置字符型响应</h3><p>常见的字符型响应类型：<br><code>resp.setContentType(&quot;text/html&quot;)</code><br>设置响应类型为文本型，内容含有html字符串，是默认的响应类型。<br><code>resp.setContentType(&quot;text/plain&quot;)</code><br>设置响应类型为文本型，内容是普通文本。<br><code>resp.setContentType(&quot;application/json&quot;)</code><br>设置响应类型为JSON格式的字符串。</p><h3 id="设置字节型响应"><a href="#设置字节型响应" class="headerlink" title="设置字节型响应"></a>设置字节型响应</h3><p>常见的字节型响应：<br><code>resp.setContentType(&quot;image/jpeg&quot;)</code><br>设置响应类型为图片类型，图片类型为jpeg或jpg格式。<br><code>resp.setContentType(&quot;image/gif&quot;)</code><br>设置响应类型为图片类型，图片类型为gif格式。</p><h3 id="设置响应编码"><a href="#设置响应编码" class="headerlink" title="设置响应编码"></a>设置响应编码</h3><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240219184524.png" alt="image.png"><br><strong>设置响应编码有两种方式</strong></p><ol><li><code>response.setContentType(&quot;text/html;charset=UTF-8&quot;);</code><br> 不仅发送到浏览器的内容会使用UTF-8编码，而且还通知浏览器使用UTF-8编码方式进行显示。所以总能正常显示中文。(建议使用该方法)</li><li><code>response.setCharacterEncoding(&quot;UTF-8&quot;);</code><br> 仅仅是发送的浏览器的内容是UTF-8编码的，至于浏览器是用哪种编码方式显示不管。所以当浏览器的显示编码方式不是UTF-8的时候，就会看到乱码，需要手动指定浏览器编码。</li></ol><h3 id="在响应中添加附加信息"><a href="#在响应中添加附加信息" class="headerlink" title="在响应中添加附加信息"></a>在响应中添加附加信息</h3><p><strong>重定向响应</strong><br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240219192310.png" alt="image.png"><br><code>response.sendRedirect(URL地址)</code><br>重定向响应会在响应头中添加一个Location的key对应的value是给定的url。客户端浏览器在解析响应头后自动向Location中的url发送请求。<br><strong>重定向响应特点：</strong></p><ol><li>重定向会产生两次请求两次响应。</li><li>重定向的url是由客户端浏览器发送的。</li><li>浏览器地址栏会有变化。</li></ol><h3 id="重定向响应案例"><a href="#重定向响应案例" class="headerlink" title="重定向响应案例"></a>重定向响应案例</h3><p>需求：创建一个搜索页面，通过百度搜索引擎完成内容搜索。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.junylu;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 重定向响应  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedirectServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">        <span class="comment">//设置请求编码  </span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//获取用户搜索数据  </span></span><br><span class="line">        String search=req.getParameter(<span class="string">&quot;search&quot;</span>);  </span><br><span class="line">        <span class="comment">//产生重定向响应  </span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;https://www.baidu.com/s?wd=&quot;</span>+ URLEncoder.encode(search,<span class="string">&quot;UTF-8&quot;</span>) +<span class="string">&quot;&amp;rsv_spt=1&amp;rsv_iqid=0x8a77446900611d4b&amp;issp=1&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_dl=ts_0&amp;rsv_sug3=5&amp;rsv_sug1=3&amp;rsv_sug7=101&amp;rsv_sug2=1&amp;rsv_btype=i&amp;prefixsug=waha&amp;rsp=0&amp;inputT=4094&amp;rsv_sug4=6237&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>在实现文件下载时，我们需要在响应头中添加附加信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+文件名);</span><br></pre></td></tr></table></figure><p><code>Content-Disposition:attachment</code><br>该附加信息表示作为对下载文件的一个标识字段。不会在浏览器中显示而是直接做下载处理。<br><code>filename</code>是文件名，表示指定下载文件的文件名。</p><h3 id="解决文件名中文乱码问题"><a href="#解决文件名中文乱码问题" class="headerlink" title="解决文件名中文乱码问题"></a>解决文件名中文乱码问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(file.getName().getBytes(<span class="string">&quot;gbk&quot;</span>)),<span class="string">&quot;iso-8859-1&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><h3 id="ServletContext对象介绍"><a href="#ServletContext对象介绍" class="headerlink" title="ServletContext对象介绍"></a>ServletContext对象介绍</h3><p>ServletContext官方叫Servlet上下文。服务器会为每一个Web应用创建一个ServletContext对象。这个对象全局唯一，而且Web应用中的所有Servlet都共享这个对象，所以叫全局应用程序共享对象。<br><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240219212345.png" alt="image.png"></p><h3 id="ServletContext对象的作用"><a href="#ServletContext对象的作用" class="headerlink" title="ServletContext对象的作用"></a>ServletContext对象的作用</h3><ul><li>相对路径转绝对路径</li><li>获取容器的附加信息</li><li>读取配置信息</li><li>全局容器<br><strong>相对路径转绝对路径</strong><br><code>context.getRealPath(&quot;path&quot;)</code><br>该方法可以将一个相对路径转换为绝对路径，在文件上传与下载时需要用到该方法做路径的转换。</li></ul><h1 id="JSP技术"><a href="#JSP技术" class="headerlink" title="JSP技术"></a>JSP技术</h1><p><strong>JSP简介</strong><br>JSP(全称:Java Server Page)Java服务端页面技术，是JavaEE平台下的技术规范。它允许使用特定的标签在html网页中插入java代码，实现动态页面处理，所以JSP就是html与java代码的复合体。JSP技术可以快速的实现一个页面的开发，相比在Servlet中实现页面开发将变得更加容易。<br><strong>常见的视图层技术</strong><br>HTML、JSP、Thymeleaf等。</p><h2 id="JSP运行原理"><a href="#JSP运行原理" class="headerlink" title="JSP运行原理"></a>JSP运行原理</h2><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/20240219231431.png" alt="image.png"></p><h2 id="JSP技术特点"><a href="#JSP技术特点" class="headerlink" title="JSP技术特点"></a>JSP技术特点</h2><p>JSP和Servlet是本质相同的技术。当一个JSP文件第一次被请求时，JSP引擎会将该JSP编译成一个Servlet，并执行这个Servlet。如果JSP文件被修改了，那么JSP引擎会重新编译这个JSP。<br>JSP引擎对JSP编译时会生成两个文件，分别是.java源文件以及编译后的.class文件，并放到Tomcat的work目录的Catalina对应的虚拟主机目录中的org\apache\jsp目录中。两个文件的名称会使用JSP的名称加” _ jsp “表示。如：index_jsp.java、index_jsp.class。</p><h2 id="JSP与Servlet区别"><a href="#JSP与Servlet区别" class="headerlink" title="JSP与Servlet区别"></a>JSP与Servlet区别</h2><ul><li>JSP以源文件形式部署到容器中，而Servlet需要编译成class文件后部署到容器中。</li><li>JSP部署到web项目的根目录下或根目录下的其他子目录和静态同资源位于相同位置。而Servlet需要部署到WEB-INF&#x2F;classes目录中。</li><li>JSP中的html代码会被JSP引擎放入到Servlet的out.write()方法中。而在Servlet中我们需要通过自己对字符流输出流的操作生成响应的页面。</li><li>JSP更擅长表现于页面显示，Servlet更擅长于逻辑控制。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JSP </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习</title>
      <link href="/posts/c6fb831a.html"/>
      <url>/posts/c6fb831a.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL学习"><a href="#MySQL学习" class="headerlink" title="MySQL学习"></a>MySQL学习</h1><h2 id="SQL语言分类"><a href="#SQL语言分类" class="headerlink" title="SQL语言分类"></a>SQL语言分类</h2><ol><li>数据查询语言(DQL)，用以从表中获得数据，确定数据怎样在应用程序中给出。关键字<code>select</code>是DQL(也是所有SQL)用得最多的动词。<ul><li><code>select</code></li><li><code>from</code></li><li><code>where</code></li><li><code>order by</code></li><li><code>having</code></li></ul></li><li>数据操纵语言(DML)，其语句动词包括动词<code>insert</code>、<code>update</code>和<code>delete</code>，它们分别用于添加、修改和删除表中的行。<ul><li><code>insert</code>：添加数据</li><li><code>update</code>：更新数据</li><li><code>delete</code>：删除数据</li></ul></li><li>数据定义语言(DDL)，定义数据库对象语言，其语句包括动词<code>create</code>和<code>drop</code>等。<ul><li><code>create</code>：创建数据库对象</li><li><code>alter</code>：修改数据库对象</li><li><code>drop</code>：删除数据库对象</li></ul></li><li>数据控制语言(DCL)，它的语句通过<code>grant</code>或<code>revoke</code>获得许可，确定用户对数据库对象的访问。<ul><li><code>grant</code>：授予用户某种权限</li><li><code>revoke</code>：回收授予的某种权限</li></ul></li><li>事务控制语言(TCL)，它的语句能确保被DML语句影响的表的所有行及时得到更新。<ul><li><code>commit</code>：提交事务</li><li><code>rollback</code>：回滚事务</li><li><code>savepoint</code>：设置回滚点<blockquote><p><em><strong>注意</strong></em><br>数据操纵语言DML(<code>insert、update、delete</code>)针对表中的数据；<br>而数据定义语言DDL(<code>create、alter、drop</code>)针对数据库对象，比如数据库database、表table、索引index、视图view、存储过程procedure、触发器trigger。</p></blockquote></li></ul></li></ol><h2 id="SQL语言语法"><a href="#SQL语言语法" class="headerlink" title="SQL语言语法"></a>SQL语言语法</h2><ol><li>SQL语句不区分大小写，关键字建议大写。</li><li>SQL语句可以单行或多行书写，以分号结尾。</li></ol><h2 id="创建与删除数据库"><a href="#创建与删除数据库" class="headerlink" title="创建与删除数据库"></a>创建与删除数据库</h2><ol><li>使用DDL语句创建数据库<br> <code>create database 数据库名 default character set 字符编码;</code><br> 示例：<br> 创建一个test数据库，并查看该数据库，以及该数据库的编码。<br> 创建数据库：<br> <code>create database test default character set utf8;</code><br> 查看数据库：<br> <code>show databases;</code><br> 查看数据库编码： <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> schema_name,default_character_set_name </span><br><span class="line"><span class="keyword">from</span> information_schema.schemata</span><br><span class="line"><span class="keyword">where</span> schema_name<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>使用DDL语句删除数据库<br> <code>drop database 数据库名称</code><br> 示例：<br> 删除test数据库<br> <code>drop delete test</code></li></ol><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><p>在创建表时，需要先选择数据库。<br><code>use 数据库名</code><br>示例：<br>创建一个名称为students的数据库，编码为utf8<br><code>create database students default character set utf8;</code><br>选择该数据库<br><code>use students;</code></p><h2 id="MySQL中的数据类型"><a href="#MySQL中的数据类型" class="headerlink" title="MySQL中的数据类型"></a>MySQL中的数据类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><table><thead><tr><th>MySQL数据类型</th><th>含义(有符号)</th></tr></thead><tbody><tr><td>tinyint(m)</td><td>1个字节范围(-128~127)</td></tr><tr><td>smallint(m)</td><td>2个字节范围(-32768~32767)</td></tr><tr><td>mediumint(m)</td><td>3个字节范围(-8388608~8388607)</td></tr><tr><td>int(m)</td><td>4个字节范围(-2147483648~2147483647)</td></tr><tr><td>bigint(m)</td><td>8个字节范围(+-9.22 * 10的18次方)</td></tr><tr><td>数值类型中的长度m是指显示长度，并不表示存储长度，只有字段指定<code>zerofill</code>时有用。</td><td></td></tr><tr><td>例如：<code>int(3)</code>如果实际值是2，如果列指定了<code>zerofill</code>，查询结果就是002，左边用0来填充。</td><td></td></tr></tbody></table><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>float(m,d)</td><td>单精度浮点型8位精度(4字节)m总个数，d小数位,(m-d)整数位</td></tr><tr><td>double(m,d)</td><td>双精度浮点型16位精度(8字节)m总个数，d小数位,(m-d)整数位</td></tr></tbody></table><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>char(n)</td><td>固定长度，最多255个字符</td></tr><tr><td>tinytext</td><td>可变长度，最多255个字符</td></tr><tr><td>varchar(n)</td><td>可变长度，最多65535个字符</td></tr><tr><td>text</td><td>可变长度，最多65535个字符</td></tr><tr><td>mediumtext</td><td>可变长度，最多2的24次方-1个字符</td></tr><tr><td>longtext</td><td>可变长度，最多2的32次方-1个字符</td></tr></tbody></table><blockquote><p><em><strong>char和varchar：</strong></em></p><ol><li>char长度固定，即每条数据占用等长字节空间；适合用在身份证号码、手机号码等定长。</li><li>varchar可变长度，可以设置最大长度；适合用在长度可变的属性。</li><li>text不设置长度，当不知道属性的最大长度时，适合用text。<br><em>按照查询速度：char最快，varchar次之，text最慢。</em></li></ol></blockquote><p><strong>字符串使用建议：</strong></p><ol><li>经常变化的字段用varchar</li><li>知道固定长度的用char</li><li>尽量用carchar</li><li>超过255字符的只能用varchar或者text</li><li>能用varchar的地方不用text</li></ol><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>日期YYYY-MM–DD</td></tr><tr><td>time</td><td>时间HH:MM:SS</td></tr><tr><td>datetime</td><td>日期时间YYYY-MM-DD HH:MM:SS</td></tr><tr><td>timestamp</td><td>时间戳YYYYMMDD HHMMSS</td></tr></tbody></table><h3 id="二进制数据-BLOB"><a href="#二进制数据-BLOB" class="headerlink" title="二进制数据(BLOB)"></a>二进制数据(BLOB)</h3><ol><li>blob和text存储方式不同，text以文本方式存储，英文存储区分大小写，而blob是以二进制方式存储，不区分大小写。</li><li>blob存储的数据只能整体读出。</li><li>text可以指定字符集，blob不用指定字符集。</li></ol><h2 id="创建表与删除表"><a href="#创建表与删除表" class="headerlink" title="创建表与删除表"></a>创建表与删除表</h2><ol><li>使用DDL语句创建表<br> <code>create table 表名(列名 类型,列名,类型......);</code><br> 示例：<br> 创建一个employees表包含雇员id，雇员名字，雇员薪水。 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employees(employee_id <span class="type">int</span>,employee_name <span class="type">varchar</span>(<span class="number">10</span>),salary <span class="type">float</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure> 查看已创建的表。<br> <code>show tables;</code></li><li>使用DDL语句删除表<br> <code>drop table 表名;</code><br> 示例：<br> 删除employees表。<br> <code>drop table employees;</code></li></ol><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><ol><li>使用DDL语句修改表<br> <code>alter table 旧表名 rename 新表名;</code><br> 示例一：<br> 创建一个employees表包含雇员id、雇员名字、雇员薪水。 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employees(employee_id <span class="type">int</span>,employee_name <span class="type">varchar</span>(<span class="number">10</span>),salary <span class="type">float</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure> 将employees表名修改为emp <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employees rename emp;</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><ol><li>使用DDL语句修改列名<br> <code>alter table 表名 change column 旧列名 新列名 类型;</code><br> 示例：<br> 将emp表中的employee_name修改为name <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp </span><br><span class="line">change <span class="keyword">column</span> employee_name name <span class="type">varchar</span>(<span class="number">20</span>);  </span><br></pre></td></tr></table></figure><blockquote><p><em><strong>注意：</strong></em> 即使新列名的类型不变，sql语句中也需要指明类型。</p></blockquote></li></ol><h3 id="修改列类型"><a href="#修改列类型" class="headerlink" title="修改列类型"></a>修改列类型</h3><ol><li>使用DDL语句修改列类型<br> <code>alter table 表名 modify 列名 新类型;</code><br> 示例：<br> 将emp中的name的长度指定位40. <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp modify name <span class="type">varchar</span>(<span class="number">40</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加新列"><a href="#添加新列" class="headerlink" title="添加新列"></a>添加新列</h3><ol><li>使用DDL语句添加新列<br> <code>alter table 表名 add column 新列名 类型;</code><br> 示例：<br> 在emp表中添加佣金列，列名为commission_pct。 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">column</span> commission_pct <span class="type">float</span>(<span class="number">4</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除指定列"><a href="#删除指定列" class="headerlink" title="删除指定列"></a>删除指定列</h3><ol><li>使用DDL语句删除指定列<br> <code>alter table 表名 drop column 列名;</code><br> 示例：<br> 删除emp表中的commission_pct。 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> commission_pct;</span><br></pre></td></tr></table></figure></li></ol><h2 id="MySQL中的约束"><a href="#MySQL中的约束" class="headerlink" title="MySQL中的约束"></a>MySQL中的约束</h2><p>约束：数据库约束是对表中的数据进行进一步的限制，保证数据的正确性、有效性和完整性。</p><ol><li>主键约束(PK:primary key)<ol><li>不允许为空</li><li>不允许有重复值出现</li><li>保证数据的唯一性<blockquote><p>主键约束是使用最频繁的约束，在设计数据表时，一般情况下，都会要求标准设置一个主键。<br>主键是表的一个特殊字段，该字段能唯一标识该表中的每条信息。例如，学生信息表中的学号是唯一的。</p></blockquote></li></ol></li><li>外键约束(FK:foreign key)<ol><li>允许有空值</li><li>允许有重复</li><li>值必须是参照表的参照列中所包含的值</li><li>保证数据的参照完整性<blockquote><p>外键约束经常和主键约束一起使用，用来确保数据的一致性。</p></blockquote></li></ol></li><li>唯一性约束(Unique)<ol><li>相同值只能出现一次</li><li>允许为多个列添加唯一性约束</li><li>保证数据的唯一性<blockquote><p>唯一性约束与主键约束有一个相似的地方，就是它们都能够确保列的唯一性。与主键约束不同的是，唯一性约束在一个表中可以有多个，并且设置唯一性约束的列是允许有空值的。</p></blockquote></li></ol></li><li>非空约束(Not Null)<ol><li>列中不能有空值</li><li>允许重复值</li><li>允许为多个列添加非空约束</li><li>保证数据没有空值<blockquote><p>非空约束用来约束表中的字段不能为空。</p></blockquote></li></ol></li><li>检查约束(Check)<ol><li>用户自己定义约束条件</li><li>保证数据满足自定义的条件约束</li><li>MySQL目前不支持检查约束<blockquote><p>检查约束也叫用户自定义约束，是用来检查数据表中，字段值是否有效的一个手段，但目前MySQL数据库不支持检查约束。</p></blockquote></li></ol></li></ol><h3 id="主键约束-PK"><a href="#主键约束-PK" class="headerlink" title="主键约束(PK)"></a>主键约束(PK)</h3><ol><li>单一主键：使用一个列作为主键列，当该列的值有重复时，则违反唯一约束。</li><li>联合主键：使用多个列作为主键列，当多个列的值都相同时，则违反唯一约束。</li></ol><h4 id="修改表添加主键约束"><a href="#修改表添加主键约束" class="headerlink" title="修改表添加主键约束"></a>修改表添加主键约束</h4><ol><li>使用DDL语句添加主键约束<br> <code>alter table 表名 add primary key(列名);</code><br> 示例：<br> 将emp表中的employee_id修改为主键 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">primary</span> key(employee_id);</span><br></pre></td></tr></table></figure><ul><li><em><strong>主键自增长</strong></em><br>  MySQL中的自动增长类型要求：<ul><li>一个表中只能有一个列为自动增长。</li><li>自动增长的列的类型必须是整数类型。</li><li>自动增长只能添加到具备主键约束与唯一性约束的列上。</li><li>删除主键约束或唯一性约束，如果该列拥有自动增长能力，则需要先去掉自动增长然后在删除约束。  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 主键 类型 auto_increment;</span><br></pre></td></tr></table></figure>  示例：<br>  将emp表中的employee_id主键修改为自增。  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp modify employee_id <span class="type">int</span> auto_increment;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h4 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h4><ol><li>使用DDL语句删除主键约束<br> <code>alter table 表名 drop primary key;</code><blockquote><p><em><strong>注意：</strong></em><br>删除主键时，如果主键列具备自动增长能力，需要先去掉自动增长，然后在删除主键。</p></blockquote> 示例：<br> 删除emp表中的employee_id主键约束<br> 去掉自动增长：<br> <code>alter table emp modify employee_id int;</code><br> 删除主键:<br> <code>alter table emp drop primary key;</code></li></ol><h3 id="外键约束-FK"><a href="#外键约束-FK" class="headerlink" title="外键约束(FK)"></a>外键约束(FK)</h3><h4 id="修改表添加外键约束"><a href="#修改表添加外键约束" class="headerlink" title="修改表添加外键约束"></a>修改表添加外键约束</h4><ol><li>使用DDL语句添加外键约束<br> <code>alter table 表名 add constraint 约束名 foreign key(列名) references 参照的表名(参照的列名);</code><br> 示例一：<br> 创建departments表包含department_id、department_name、location_id。 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> departments(department_id <span class="type">int</span>,department_name <span class="type">varchar</span>(<span class="number">30</span>),location_id      <span class="type">int</span> );</span><br></pre></td></tr></table></figure> 示例二：<br> 修改departments表，向departments_id列添加主键约束与自动递增(外键一般参照列都是参照表的主键列)。 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> departments <span class="keyword">add</span> <span class="keyword">primary</span> key(department_id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> departments modify department_id <span class="type">int</span> auto_increment;</span><br></pre></td></tr></table></figure> 示例三：<br> 修改emp表，添加dept_id列。 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">column</span> dept_id <span class="type">int</span>;</span><br></pre></td></tr></table></figure> 示例四：<br>  向emp表中的dept_id列添加外键约束。  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> emp_fk <span class="keyword">foreign</span> key(dept_id)</span><br><span class="line"><span class="keyword">references</span> departments(department_id);</span><br></pre></td></tr></table></figure></li></ol><h4 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h4><ol><li>使用DDL语句删除外键约束<br> <code>alter table 表名 drop foreign key 约束名;</code><br> 示例：<br> 删除dept_id的外键约束<br> <code>alter table emp drop foreign key emp_fk;</code></li></ol><h3 id="唯一性约束-Unique"><a href="#唯一性约束-Unique" class="headerlink" title="唯一性约束(Unique)"></a>唯一性约束(Unique)</h3><h4 id="修改表添加唯一性约束"><a href="#修改表添加唯一性约束" class="headerlink" title="修改表添加唯一性约束"></a>修改表添加唯一性约束</h4><ol><li>使用DDL语句添加唯一性约束<br> <code>alter table 表名 add constraint 约束名 unique(列名);</code><br> 示例：<br> 向emp表中的name添加唯一约束<br> <code>alter table emp add constraint emp_uk unique(name);</code></li></ol><h4 id="删除唯一性约束"><a href="#删除唯一性约束" class="headerlink" title="删除唯一性约束"></a>删除唯一性约束</h4><ol><li>使用DDL语句删除唯一性约束<br> <code>alter table 表名 drop key 约束名;</code><br> 示例：<br> 删除name的唯一性约束<br> <code>alter table emp drop key emp_uk;</code></li></ol><h3 id="非空约束-Not-Null"><a href="#非空约束-Not-Null" class="headerlink" title="非空约束(Not Null)"></a>非空约束(Not Null)</h3><h4 id="修改表添加非空约束"><a href="#修改表添加非空约束" class="headerlink" title="修改表添加非空约束"></a>修改表添加非空约束</h4><ol><li>使用DDL语句添加非空约束<br> <code>alter table 表名 modify 列名 类型 not null;</code><br> 示例：<br> 向emp表中的salary添加非空约束<br> <code>alter table emp modify salary float(8,2) not null;</code></li></ol><h4 id="删除非空约束"><a href="#删除非空约束" class="headerlink" title="删除非空约束"></a>删除非空约束</h4><ol><li>使用DDL语句删除非空约束<br> <code>alter table 表名 modify 列名 类型 null;</code><br> 示例：<br> 删除emp表中salary的非空约束。<br> <code>alter table emp modify salary float(8,2) null;</code></li></ol><h3 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h3><h4 id="查询表中的约束信息"><a href="#查询表中的约束信息" class="headerlink" title="查询表中的约束信息"></a>查询表中的约束信息</h4><p><code>show keys from 表名;</code><br>示例：<br>创建depts表包含department_id该列为主键且自动增长，department_name列不允许重复，location_id列不允许有空值。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> depts(department_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  department_name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">unique</span>,</span><br><span class="line">  location_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/%E6%9C%AA%E5%AE%8C.jpg" alt="未完.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的STL常用操作及函数</title>
      <link href="/posts/a3f76817.html"/>
      <url>/posts/a3f76817.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1.位运算"></a>1.位运算</h3><ul><li><code>&amp;</code>与</li><li><code>|</code>或</li><li><code>~</code>非</li><li><code>^</code>异或</li><li><code>&gt;&gt;</code>右移</li><li><code>&lt;&lt;</code>左移</li></ul><blockquote><p><em><strong>常用操作</strong></em></p><ul><li>求x的第k位数字x&gt;&gt;k&amp;1</li><li>lowbit(x)&#x3D;x&amp;-x，（-a等价于~a+1）返回x的最后一位1。例：0010返回10，10000返回10000</li></ul></blockquote><h3 id="2-常用库函数"><a href="#2-常用库函数" class="headerlink" title="2.常用库函数"></a>2.常用库函数</h3><ol><li>reverse翻转(时间复杂度O(n))<ul><li>翻转一个vector<code>reverse(a.begin(),a.end())</code></li><li>翻转一个数组a，元素存放在下标1~n：<code>reverse(a+1,a+1+n)</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;)</span></span>;  </span><br><span class="line">    <span class="type">int</span> b[]=&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;----------------------------------------&quot;</span>&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(b)/<span class="built_in">sizeof</span>(<span class="type">int</span>);i++)cout&lt;&lt;b[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="built_in">reverse</span>(b,b+<span class="built_in">sizeof</span>(b)/<span class="built_in">sizeof</span>(<span class="type">int</span>));  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(b)/<span class="built_in">sizeof</span>(<span class="type">int</span>);i++)cout&lt;&lt;b[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>unique去重<ul><li>返回去重之后的尾迭代器(或指针)，仍然为前闭后开，即这个迭代器是去重之后末尾元素的下一个位置。该函数常用于离散化，利用迭代器(或指针)的减法，可计算出去重后的元素个数。</li><li>把一个vector去重：<ul><li><code>int m=unique(a.begin(),a.end())-a.begin()</code></li></ul></li><li>把一个数组去重，元素存放在下标1~n：<ul><li><code>int m=unique(a+1,a+1+n)-(a+1)</code></li></ul></li></ul></li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>&#125;)</span></span>;  </span><br><span class="line">    <span class="type">int</span> m= <span class="built_in">unique</span>(a,a+<span class="number">7</span>)-a;  </span><br><span class="line">    cout&lt;&lt;m&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------&quot;</span>&lt;&lt;endl;  </span><br><span class="line">    <span class="type">int</span> n=<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>())-b.<span class="built_in">begin</span>();  </span><br><span class="line">    cout&lt;&lt;n&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cout&lt;&lt;b[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//常用用法(获得去重后的数组)  </span></span><br><span class="line">b.<span class="built_in">erase</span>(<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>()),b.<span class="built_in">end</span>());  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:b)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>random_shuffle随机打乱，用法与reverse相同<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;)</span></span>;  </span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));  </span><br><span class="line">    <span class="built_in">random_shuffle</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>sort：对两个迭代器(或指针)指定的部分进行快速排序，可以在第三个参数传入定义大小比较的函数，或者重载“小于号”运算符。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">//a是否应该排在b的前面  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">//return a&lt;b;//从小到大  </span></span><br><span class="line">    <span class="keyword">return</span> a&gt;b;<span class="comment">//从大到小  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;)</span></span>;  </span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));  </span><br><span class="line">    <span class="built_in">random_shuffle</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="comment">//从小到大排序  </span></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="comment">//从大到小排序  </span></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="comment">//按照自己定义的比较方式  </span></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(), cmp);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体排序的两种方法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rec</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> x,y;  </span><br><span class="line">    <span class="comment">////第二种:把自定义的结构体vector排序，重载“小于号”运算符  </span></span><br><span class="line"><span class="comment">//    bool operator&lt;(const Rec &amp;t)const  </span></span><br><span class="line"><span class="comment">//    &#123;  </span></span><br><span class="line"><span class="comment">//        return x&lt;t.x;//按照x从小到大排序  </span></span><br><span class="line"><span class="comment">//    &#125;  </span></span><br><span class="line">&#125;a[<span class="number">5</span>];  </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Rec a,Rec b)</span><span class="comment">//a是否应该排在b的前面  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">//第一种  </span></span><br><span class="line">    <span class="keyword">return</span> a.y&gt;b.y;<span class="comment">//按照y从大到小  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">    a[i].x=-i;  </span><br><span class="line">    a[i].y=i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)<span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)&quot;</span>,a[i].x,a[i].y);  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="built_in">sort</span>(a,a+<span class="number">5</span>, cmp);  </span><br><span class="line">    <span class="comment">//sort(a,a+5);  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)<span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)&quot;</span>,a[i].x,a[i].y);  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>lower_bound&#x2F;upper_bound 二分<ul><li>lower_bound的第三个参数传入一个元素x，在两个迭代器（指针）指定的部分上执行二分查找，返回指向第一个大于等于x的元素的位置的迭代器（指针）。</li><li>upper_bound的用法和lower_bound大致相同，唯一的区别是查找第一个大于x的元素。当然，两个迭代器（指针）指定的部分应该是提前排好序的。</li><li>在有序int数组（元素存放在下标1~n）中查找大于等于x的最小整数的下标:<code>int i=lower_bound(a+1,a+1+n,x)-a;</code></li><li>在有序<code>vector&lt;int&gt;</code>中查找小于等于x的最大整数(假设一定存在)<code>int y=*--upper_bound(a.begin(),a.end(),x);</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">//数组  </span></span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;  </span><br><span class="line">    <span class="type">int</span> *p= <span class="built_in">lower_bound</span>(a,a+<span class="number">5</span>,<span class="number">3</span>);  </span><br><span class="line">    <span class="type">int</span> i= <span class="built_in">lower_bound</span>(a,a+<span class="number">5</span>,<span class="number">3</span>)-a;  </span><br><span class="line">    <span class="type">int</span> *q= <span class="built_in">upper_bound</span>(a,a+<span class="number">5</span>,<span class="number">3</span>);  </span><br><span class="line">    <span class="type">int</span> j= <span class="built_in">upper_bound</span>(a,a+<span class="number">5</span>,<span class="number">3</span>)-a;  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*p:&quot;</span>&lt;&lt;*p&lt;&lt;endl; <span class="comment">// 3</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;i:&quot;</span>&lt;&lt;i&lt;&lt;endl;  <span class="comment">//2</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*q:&quot;</span>&lt;&lt;*q&lt;&lt;endl; <span class="comment">// 4</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;j:&quot;</span>&lt;&lt;j&lt;&lt;endl; <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">//vector  </span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;  </span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it1= <span class="built_in">lower_bound</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">8</span>);  </span><br><span class="line">    <span class="type">int</span> x= <span class="built_in">lower_bound</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">8</span>)-b.<span class="built_in">begin</span>();  </span><br><span class="line">    <span class="keyword">auto</span> it2= <span class="built_in">upper_bound</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">8</span>);  </span><br><span class="line">    <span class="type">int</span> y= <span class="built_in">upper_bound</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">8</span>)-b.<span class="built_in">begin</span>();  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;it1:&quot;</span>&lt;&lt;*it1&lt;&lt;endl;  <span class="comment">//8</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;x:&quot;</span>&lt;&lt;x&lt;&lt;endl;  <span class="comment">//2</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;it2:&quot;</span>&lt;&lt;*it2&lt;&lt;endl;<span class="comment">//9  </span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;y:&quot;</span>&lt;&lt;y&lt;&lt;endl;  <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> c++ </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/posts/b8b0eacd.html"/>
      <url>/posts/b8b0eacd.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/lujuny/picodemo/main/img/325_ROG-Prism.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
