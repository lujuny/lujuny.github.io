<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>未命名</title>
      <link href="/posts/3c47b44b.html"/>
      <url>/posts/3c47b44b.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h1>]]></content>
      
      
      <categories>
          
          <category> cat1 </category>
          
          <category> cat2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/posts/824ac3d0.html"/>
      <url>/posts/824ac3d0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/posts/c6fb831a.html"/>
      <url>/posts/c6fb831a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>hello hexo！ <em><strong>Start writing</strong></em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cat1 </category>
          
          <category> cat2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Hello </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的STL常用操作及函数</title>
      <link href="/posts/a3f76817.html"/>
      <url>/posts/a3f76817.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1.位运算"></a>1.位运算</h3><ul><li><code>&amp;</code>与</li><li><code>|</code>或</li><li><code>~</code>非</li><li><code>^</code>异或</li><li><code>&gt;&gt;</code>右移</li><li><code>&lt;&lt;</code>左移</li></ul><blockquote><p><em><strong>常用操作</strong></em></p><ul><li>求x的第k位数字x&gt;&gt;k&amp;1</li><li>lowbit(x)&#x3D;x&amp;-x，（-a等价于~a+1）返回x的最后一位1。例：0010返回10，10000返回10000</li></ul></blockquote><h3 id="2-常用库函数"><a href="#2-常用库函数" class="headerlink" title="2.常用库函数"></a>2.常用库函数</h3><ol><li>reverse翻转(时间复杂度O(n))<ul><li>翻转一个vector<code>reverse(a.begin(),a.end())</code></li><li>翻转一个数组，元素存放在下标1~n：<code>reverse(a+1,a+1+n)</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;)</span></span>;  </span><br><span class="line">    <span class="type">int</span> b[]=&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;----------------------------------------&quot;</span>&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(b)/<span class="built_in">sizeof</span>(<span class="type">int</span>);i++)cout&lt;&lt;b[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="built_in">reverse</span>(b,b+<span class="built_in">sizeof</span>(b)/<span class="built_in">sizeof</span>(<span class="type">int</span>));  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(b)/<span class="built_in">sizeof</span>(<span class="type">int</span>);i++)cout&lt;&lt;b[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>unique去重<ul><li>返回去重之后的尾迭代器(或指针)，仍然为前闭后开，即这个迭代器是去重之后末尾元素的下一个位置。该函数常用于离散化，利用迭代器(或指针)的减法，可计算出去重后的元素个数。</li><li>把一个vector去重：<ul><li><code>int m=unique(a.begin(),a.end())-a.begin()</code></li></ul></li><li>把一个数组去重，元素存放在下标1~n：<ul><li><code>int m=unique(a+1,a+1+n)-(a+1)</code></li></ul></li></ul></li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>&#125;)</span></span>;  </span><br><span class="line">    <span class="type">int</span> m= <span class="built_in">unique</span>(a,a+<span class="number">7</span>)-a;  </span><br><span class="line">    cout&lt;&lt;m&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------&quot;</span>&lt;&lt;endl;  </span><br><span class="line">    <span class="type">int</span> n=<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>())-b.<span class="built_in">begin</span>();  </span><br><span class="line">    cout&lt;&lt;n&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cout&lt;&lt;b[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//常用用法(获得去重后的数组)  </span></span><br><span class="line">b.<span class="built_in">erase</span>(<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>()),b.<span class="built_in">end</span>());  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:b)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>random_shuffle随机打乱，用法与reverse相同<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;)</span></span>;  </span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));  </span><br><span class="line">    <span class="built_in">random_shuffle</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>sort：对两个迭代器(或指针)指定的部分进行快速排序，可以在第三个参数传入定义大小比较的函数，或者重载“小于号”运算符。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">//a是否应该排在b的前面  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">//return a&lt;b;//从小到大  </span></span><br><span class="line">    <span class="keyword">return</span> a&gt;b;<span class="comment">//从大到小  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;)</span></span>;  </span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));  </span><br><span class="line">    <span class="built_in">random_shuffle</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="comment">//从小到大排序  </span></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="comment">//从大到小排序  </span></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="comment">//按照自己定义的比较方式  </span></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(), cmp);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体排序的两种方法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rec</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> x,y;  </span><br><span class="line">    <span class="comment">////第二种:把自定义的结构体vector排序，重载“小于号”运算符  </span></span><br><span class="line"><span class="comment">//    bool operator&lt;(const Rec &amp;t)const  </span></span><br><span class="line"><span class="comment">//    &#123;  </span></span><br><span class="line"><span class="comment">//        return x&lt;t.x;//按照x从小到大排序  </span></span><br><span class="line"><span class="comment">//    &#125;  </span></span><br><span class="line">&#125;a[<span class="number">5</span>];  </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Rec a,Rec b)</span><span class="comment">//a是否应该排在b的前面  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">//第一种  </span></span><br><span class="line">    <span class="keyword">return</span> a.y&gt;b.y;<span class="comment">//按照y从大到小  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">    a[i].x=-i;  </span><br><span class="line">    a[i].y=i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)<span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)&quot;</span>,a[i].x,a[i].y);  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="built_in">sort</span>(a,a+<span class="number">5</span>, cmp);  </span><br><span class="line">    <span class="comment">//sort(a,a+5);  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)<span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)&quot;</span>,a[i].x,a[i].y);  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>lower_bound&#x2F;upper_bound 二分<ul><li>lower_bound的第三个参数传入一个元素x，在两个迭代器（指针）指定的部分上执行二分查找，返回指向第一个大于等于x的元素的位置的迭代器（指针）。</li><li>upper_bound的用法和lower_bound大致相同，唯一的区别是查找第一个大于x的元素。当然，两个迭代器（指针）指定的部分应该是提前排好序的。</li><li>在有序int数组（元素存放在下标1~n）中查找大于等于x的最小整数的下标:<code>int i=lower_bound(a+1,a+1+n,x)-a;</code></li><li>在有序<code>vector&lt;int&gt;</code>中查找小于等于x的最大整数(假设一定存在)<code>int y=*--upper_bound(a.begin(),a.end(),x);</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">//数组  </span></span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;  </span><br><span class="line">    <span class="type">int</span> *p= <span class="built_in">lower_bound</span>(a,a+<span class="number">5</span>,<span class="number">3</span>);  </span><br><span class="line">    <span class="type">int</span> i= <span class="built_in">lower_bound</span>(a,a+<span class="number">5</span>,<span class="number">3</span>)-a;  </span><br><span class="line">    <span class="type">int</span> *q= <span class="built_in">upper_bound</span>(a,a+<span class="number">5</span>,<span class="number">3</span>);  </span><br><span class="line">    <span class="type">int</span> j= <span class="built_in">upper_bound</span>(a,a+<span class="number">5</span>,<span class="number">3</span>)-a;  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*p:&quot;</span>&lt;&lt;*p&lt;&lt;endl; <span class="comment">// 3</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;i:&quot;</span>&lt;&lt;i&lt;&lt;endl;  <span class="comment">//2</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*q:&quot;</span>&lt;&lt;*q&lt;&lt;endl; <span class="comment">// 4</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;j:&quot;</span>&lt;&lt;j&lt;&lt;endl; <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">//vector  </span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;  </span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it1= <span class="built_in">lower_bound</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">8</span>);  </span><br><span class="line">    <span class="type">int</span> x= <span class="built_in">lower_bound</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">8</span>)-b.<span class="built_in">begin</span>();  </span><br><span class="line">    <span class="keyword">auto</span> it2= <span class="built_in">upper_bound</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">8</span>);  </span><br><span class="line">    <span class="type">int</span> y= <span class="built_in">upper_bound</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">8</span>)-b.<span class="built_in">begin</span>();  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;it1:&quot;</span>&lt;&lt;*it1&lt;&lt;endl;  <span class="comment">//8</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;x:&quot;</span>&lt;&lt;x&lt;&lt;endl;  <span class="comment">//2</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;it2:&quot;</span>&lt;&lt;*it2&lt;&lt;endl;<span class="comment">//9  </span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;y:&quot;</span>&lt;&lt;y&lt;&lt;endl;  <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习</title>
      <link href="/posts/c6fb831a.html"/>
      <url>/posts/c6fb831a.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL学习"><a href="#MySQL学习" class="headerlink" title="MySQL学习"></a>MySQL学习</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/posts/b8b0eacd.html"/>
      <url>/posts/b8b0eacd.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
